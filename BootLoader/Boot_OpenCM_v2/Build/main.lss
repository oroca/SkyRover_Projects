
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000224c  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  20000000  0800224c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000112c  20000200  08002600  00010200  2**9
                  ALLOC
  3 ._usrstack    00001000  2000132c  0800372c  00010200  2**0
                  ALLOC
  4 .debug_info   00006af7  00000000  00000000  000100e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000235e  00000000  00000000  00016bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    00003d95  00000000  00000000  00018f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000930  00000000  00000000  0001ccce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 000008d0  00000000  00000000  0001d5fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002b10  00000000  00000000  0001dece  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002301  00000000  00000000  000209de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000070  00000000  00000000  00022cdf  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000033  00000000  00000000  00022d4f  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000014e0  00000000  00000000  00022d84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 29 04 00 08                             .P. )...

08000008 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000008:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800000a:	2000      	movs	r0, #0
 800000c:	4b01      	ldr	r3, [pc, #4]	; (8000014 <LED_Tick+0xc>)
 800000e:	4798      	blx	r3
 8000010:	bd08      	pop	{r3, pc}
 8000012:	bf00      	nop
 8000014:	08000b09 	.word	0x08000b09

08000018 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000018:	b530      	push	{r4, r5, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001a:	4b20      	ldr	r3, [pc, #128]	; (800009c <main+0x84>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800001c:	b085      	sub	sp, #20
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001e:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000020:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000022:	481f      	ldr	r0, [pc, #124]	; (80000a0 <main+0x88>)
 8000024:	4780      	blx	r0
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000026:	4d1f      	ldr	r5, [pc, #124]	; (80000a4 <main+0x8c>)
 8000028:	2202      	movs	r2, #2
 800002a:	4b1f      	ldr	r3, [pc, #124]	; (80000a8 <main+0x90>)
 800002c:	4620      	mov	r0, r4
 800002e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000032:	9400      	str	r4, [sp, #0]
 8000034:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );	
 8000036:	4620      	mov	r0, r4
 8000038:	491c      	ldr	r1, [pc, #112]	; (80000ac <main+0x94>)
 800003a:	4788      	blx	r1

	Main_Init();


	
	if( Ap_ST32BL_RunBoot == TRUE )
 800003c:	4a1c      	ldr	r2, [pc, #112]	; (80000b0 <main+0x98>)
 800003e:	7813      	ldrb	r3, [r2, #0]
 8000040:	2b01      	cmp	r3, #1
 8000042:	d125      	bne.n	8000090 <main+0x78>
		//-- 먼저 명령을 보낸 포트로 다운로드 시작 
		//
		#if 1
		while(1)
		{
			if( HW_VCOM_Q_VAILD(0) > 0 )
 8000044:	2000      	movs	r0, #0
 8000046:	4a1b      	ldr	r2, [pc, #108]	; (80000b4 <main+0x9c>)
 8000048:	4790      	blx	r2
 800004a:	b150      	cbz	r0, 8000062 <main+0x4a>
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );
 800004c:	2000      	movs	r0, #0
 800004e:	f10d 010f 	add.w	r1, sp, #15
 8000052:	4b19      	ldr	r3, [pc, #100]	; (80000b8 <main+0xa0>)
 8000054:	4798      	blx	r3

				if( Uart_GetData == STM32_CMD_INIT )
 8000056:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800005a:	287f      	cmp	r0, #127	; 0x7f
 800005c:	d101      	bne.n	8000062 <main+0x4a>
				{
					Ap_ST32BL_UartPort = HW_UART_VCOM;
 800005e:	2005      	movs	r0, #5
 8000060:	e00e      	b.n	8000080 <main+0x68>
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
					break;
				}
			}

			if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 )
 8000062:	2000      	movs	r0, #0
 8000064:	4915      	ldr	r1, [pc, #84]	; (80000bc <main+0xa4>)
 8000066:	4788      	blx	r1
 8000068:	2800      	cmp	r0, #0
 800006a:	ddeb      	ble.n	8000044 <main+0x2c>
			{
				Hw_Uart_Q_Pop( HW_UART_COM1, &Uart_GetData );
 800006c:	2000      	movs	r0, #0
 800006e:	f10d 010f 	add.w	r1, sp, #15
 8000072:	4a13      	ldr	r2, [pc, #76]	; (80000c0 <main+0xa8>)
 8000074:	4790      	blx	r2

				if( Uart_GetData == STM32_CMD_INIT )
 8000076:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800007a:	2b7f      	cmp	r3, #127	; 0x7f
 800007c:	d1e2      	bne.n	8000044 <main+0x2c>
				{
					Ap_ST32BL_UartPort = HW_UART_COM1;
 800007e:	2000      	movs	r0, #0
 8000080:	4910      	ldr	r1, [pc, #64]	; (80000c4 <main+0xac>)
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000082:	4a11      	ldr	r2, [pc, #68]	; (80000c8 <main+0xb0>)
			{
				Hw_Uart_Q_Pop( HW_UART_COM1, &Uart_GetData );

				if( Uart_GetData == STM32_CMD_INIT )
				{
					Ap_ST32BL_UartPort = HW_UART_COM1;
 8000084:	7008      	strb	r0, [r1, #0]
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000086:	2079      	movs	r0, #121	; 0x79
 8000088:	4790      	blx	r2
					break;
				}
			}	
		}
		#endif
		Ap_ST32BL_Main();
 800008a:	4b10      	ldr	r3, [pc, #64]	; (80000cc <main+0xb4>)
 800008c:	4798      	blx	r3
 800008e:	e002      	b.n	8000096 <main+0x7e>
	}
	else
	{		
		Ap_ST32BL_JumpToApp(0);
 8000090:	4620      	mov	r0, r4
 8000092:	490f      	ldr	r1, [pc, #60]	; (80000d0 <main+0xb8>)
 8000094:	4788      	blx	r1
	}
    
    return 0;
}
 8000096:	2000      	movs	r0, #0
 8000098:	b005      	add	sp, #20
 800009a:	bd30      	pop	{r4, r5, pc}
 800009c:	08000521 	.word	0x08000521
 80000a0:	080000d5 	.word	0x080000d5
 80000a4:	08000969 	.word	0x08000969
 80000a8:	08000009 	.word	0x08000009
 80000ac:	08000985 	.word	0x08000985
 80000b0:	200002ca 	.word	0x200002ca
 80000b4:	08000bd5 	.word	0x08000bd5
 80000b8:	08000c3d 	.word	0x08000c3d
 80000bc:	080009f9 	.word	0x080009f9
 80000c0:	08000a5d 	.word	0x08000a5d
 80000c4:	200002c9 	.word	0x200002c9
 80000c8:	08000135 	.word	0x08000135
 80000cc:	08000305 	.word	0x08000305
 80000d0:	080002c9 	.word	0x080002c9

080000d4 <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 80000d4:	b508      	push	{r3, lr}
	Ap_ST32BL_Init();
 80000d6:	4b01      	ldr	r3, [pc, #4]	; (80000dc <Ap_Init+0x8>)
 80000d8:	4798      	blx	r3
 80000da:	bd08      	pop	{r3, pc}
 80000dc:	080000e1 	.word	0x080000e1

080000e0 <Ap_ST32BL_Init>:
{
	u32 i;
	u32 PinNum;

	PinNum = 15-8;
	REG_GPIOC_CRH &= ~(0x0F << (PinNum*4+0));	// Clear
 80000e0:	4b10      	ldr	r3, [pc, #64]	; (8000124 <Ap_ST32BL_Init+0x44>)
 80000e2:	681a      	ldr	r2, [r3, #0]
 80000e4:	f022 4070 	bic.w	r0, r2, #4026531840	; 0xf0000000
 80000e8:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (PinNum*4+0));	// MODE, PC.15 Input Mode
 80000ea:	6819      	ldr	r1, [r3, #0]
 80000ec:	6019      	str	r1, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (PinNum*4+2));	// CNF,  PC.15 input pull-up/pull-down
 80000ee:	681a      	ldr	r2, [r3, #0]
 80000f0:	f042 4000 	orr.w	r0, r2, #2147483648	; 0x80000000
 80000f4:	6018      	str	r0, [r3, #0]

		
	CLR_BIT( REG_GPIOC_ODR, 15 );
 80000f6:	6899      	ldr	r1, [r3, #8]
 80000f8:	f421 4200 	bic.w	r2, r1, #32768	; 0x8000
 80000fc:	609a      	str	r2, [r3, #8]


	if( IS_SET_BIT(REG_GPIOC_IDR, 15) )
 80000fe:	3304      	adds	r3, #4
 8000100:	6818      	ldr	r0, [r3, #0]
 8000102:	4a09      	ldr	r2, [pc, #36]	; (8000128 <Ap_ST32BL_Init+0x48>)
 8000104:	f410 4100 	ands.w	r1, r0, #32768	; 0x8000
	{
		Ap_ST32BL_RunBoot = TRUE;
 8000108:	bf18      	it	ne
 800010a:	2101      	movne	r1, #1
	}
	else
	{
		Ap_ST32BL_RunBoot = FALSE;
 800010c:	7011      	strb	r1, [r2, #0]
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Init( void )
{
 800010e:	2300      	movs	r3, #0
		Ap_ST32BL_RunBoot = FALSE;
	}

	for( i=0; i<128; i++ )
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 8000110:	4906      	ldr	r1, [pc, #24]	; (800012c <Ap_ST32BL_Init+0x4c>)
 8000112:	2000      	movs	r0, #0
 8000114:	5458      	strb	r0, [r3, r1]
	else
	{
		Ap_ST32BL_RunBoot = FALSE;
	}

	for( i=0; i<128; i++ )
 8000116:	3301      	adds	r3, #1
 8000118:	2b80      	cmp	r3, #128	; 0x80
 800011a:	d1f9      	bne.n	8000110 <Ap_ST32BL_Init+0x30>
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
	}

	Ap_ST32BL_UartPort = HW_UART_COM1;	
 800011c:	4a04      	ldr	r2, [pc, #16]	; (8000130 <Ap_ST32BL_Init+0x50>)
 800011e:	7010      	strb	r0, [r2, #0]
 8000120:	4770      	bx	lr
 8000122:	bf00      	nop
 8000124:	40011004 	.word	0x40011004
 8000128:	200002ca 	.word	0x200002ca
 800012c:	200002cb 	.word	0x200002cb
 8000130:	200002c9 	.word	0x200002c9

08000134 <Ap_ST32BL_SendByte>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_SendByte( u8 ByteData )
{
 8000134:	b508      	push	{r3, lr}
	Hw_Uart_Putch( Ap_ST32BL_UartPort, ByteData );
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <Ap_ST32BL_SendByte+0x10>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_SendByte( u8 ByteData )
{
 8000138:	4601      	mov	r1, r0
	Hw_Uart_Putch( Ap_ST32BL_UartPort, ByteData );
 800013a:	4a03      	ldr	r2, [pc, #12]	; (8000148 <Ap_ST32BL_SendByte+0x14>)
 800013c:	7818      	ldrb	r0, [r3, #0]
 800013e:	4790      	blx	r2
 8000140:	bd08      	pop	{r3, pc}
 8000142:	bf00      	nop
 8000144:	200002c9 	.word	0x200002c9
 8000148:	08000771 	.word	0x08000771

0800014c <Ap_ST32BL_ReceiveByte>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_ReceiveByte( void )
{
 800014c:	b508      	push	{r3, lr}
	Hw_Uart_Getch( Ap_ST32BL_UartPort );
 800014e:	4b02      	ldr	r3, [pc, #8]	; (8000158 <Ap_ST32BL_ReceiveByte+0xc>)
 8000150:	4902      	ldr	r1, [pc, #8]	; (800015c <Ap_ST32BL_ReceiveByte+0x10>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	4788      	blx	r1
}
 8000156:	bd08      	pop	{r3, pc}
 8000158:	200002c9 	.word	0x200002c9
 800015c:	08000735 	.word	0x08000735

08000160 <Ap_ST32BL_WaitCmd>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WaitCmd( void )
{
 8000160:	b538      	push	{r3, r4, r5, lr}
	u8 Ch;
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();
 8000162:	4d13      	ldr	r5, [pc, #76]	; (80001b0 <Ap_ST32BL_WaitCmd+0x50>)
 8000164:	47a8      	blx	r5

	switch( Cmd )
 8000166:	2831      	cmp	r0, #49	; 0x31
 8000168:	462b      	mov	r3, r5
{
	u8 Ch;
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();
 800016a:	4604      	mov	r4, r0
 800016c:	4d11      	ldr	r5, [pc, #68]	; (80001b4 <Ap_ST32BL_WaitCmd+0x54>)

	switch( Cmd )
 800016e:	d015      	beq.n	800019c <Ap_ST32BL_WaitCmd+0x3c>
 8000170:	d808      	bhi.n	8000184 <Ap_ST32BL_WaitCmd+0x24>
 8000172:	2802      	cmp	r0, #2
 8000174:	d012      	beq.n	800019c <Ap_ST32BL_WaitCmd+0x3c>
 8000176:	d801      	bhi.n	800017c <Ap_ST32BL_WaitCmd+0x1c>
 8000178:	b180      	cbz	r0, 800019c <Ap_ST32BL_WaitCmd+0x3c>
 800017a:	e013      	b.n	80001a4 <Ap_ST32BL_WaitCmd+0x44>
 800017c:	2811      	cmp	r0, #17
 800017e:	d00d      	beq.n	800019c <Ap_ST32BL_WaitCmd+0x3c>
 8000180:	2821      	cmp	r0, #33	; 0x21
 8000182:	e00a      	b.n	800019a <Ap_ST32BL_WaitCmd+0x3a>
 8000184:	2873      	cmp	r0, #115	; 0x73
 8000186:	d009      	beq.n	800019c <Ap_ST32BL_WaitCmd+0x3c>
 8000188:	d804      	bhi.n	8000194 <Ap_ST32BL_WaitCmd+0x34>
 800018a:	f1a0 0243 	sub.w	r2, r0, #67	; 0x43
 800018e:	2a01      	cmp	r2, #1
 8000190:	d808      	bhi.n	80001a4 <Ap_ST32BL_WaitCmd+0x44>
 8000192:	e003      	b.n	800019c <Ap_ST32BL_WaitCmd+0x3c>
 8000194:	287f      	cmp	r0, #127	; 0x7f
 8000196:	d002      	beq.n	800019e <Ap_ST32BL_WaitCmd+0x3e>
 8000198:	28ff      	cmp	r0, #255	; 0xff
 800019a:	d103      	bne.n	80001a4 <Ap_ST32BL_WaitCmd+0x44>
		case STM32_CMD_WRITE_FLASH:
		case STM32_CMD_WRITE_UNPROTECT:
		case STM32_CMD_READ_FLASH:
		case STM32_CMD_GO:
		case 0xFF:
			CmdC = Ap_ST32BL_ReceiveByte();
 800019c:	4798      	blx	r3

			Ap_ST32BL_SendByte(STM32_COMM_ACK);				
 800019e:	2079      	movs	r0, #121	; 0x79
 80001a0:	47a8      	blx	r5
			break;
 80001a2:	e002      	b.n	80001aa <Ap_ST32BL_WaitCmd+0x4a>

		default:
			Ap_ST32BL_SendByte(STM32_COMM_NACK);
 80001a4:	201f      	movs	r0, #31
 80001a6:	4903      	ldr	r1, [pc, #12]	; (80001b4 <Ap_ST32BL_WaitCmd+0x54>)
 80001a8:	4788      	blx	r1
			break;
	}


	return Cmd;
}
 80001aa:	4620      	mov	r0, r4
 80001ac:	bd38      	pop	{r3, r4, r5, pc}
 80001ae:	bf00      	nop
 80001b0:	0800014d 	.word	0x0800014d
 80001b4:	08000135 	.word	0x08000135

080001b8 <Ap_ST32BL_EraseFlash>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_EraseFlash( void )
{
 80001b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32 i;

	
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 80001ba:	2304      	movs	r3, #4

	FLASH_Unlock();
 80001bc:	480e      	ldr	r0, [pc, #56]	; (80001f8 <Ap_ST32BL_EraseFlash+0x40>)
	u32 i;

	
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 80001be:	f88d 3007 	strb.w	r3, [sp, #7]

	FLASH_Unlock();
 80001c2:	4780      	blx	r0
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
 80001c4:	2035      	movs	r0, #53	; 0x35
 80001c6:	490d      	ldr	r1, [pc, #52]	; (80001fc <Ap_ST32BL_EraseFlash+0x44>)
 80001c8:	4788      	blx	r1


	for( i=0; i<128; i++ )
 80001ca:	2200      	movs	r2, #0
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 80001cc:	4d0c      	ldr	r5, [pc, #48]	; (8000200 <Ap_ST32BL_EraseFlash+0x48>)
 80001ce:	2400      	movs	r4, #0
 80001d0:	5554      	strb	r4, [r2, r5]

	FLASH_Unlock();
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);


	for( i=0; i<128; i++ )
 80001d2:	3201      	adds	r2, #1
 80001d4:	2a80      	cmp	r2, #128	; 0x80
 80001d6:	d1f9      	bne.n	80001cc <Ap_ST32BL_EraseFlash+0x14>
	}

	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);
 80001d8:	480a      	ldr	r0, [pc, #40]	; (8000204 <Ap_ST32BL_EraseFlash+0x4c>)
 80001da:	4b0b      	ldr	r3, [pc, #44]	; (8000208 <Ap_ST32BL_EraseFlash+0x50>)
 80001dc:	4798      	blx	r3
 80001de:	f88d 0007 	strb.w	r0, [sp, #7]

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;

	if( FLASHStatus != FLASH_COMPLETE )
 80001e2:	f89d 1007 	ldrb.w	r1, [sp, #7]
	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 80001e6:	2001      	movs	r0, #1

	if( FLASHStatus != FLASH_COMPLETE )
 80001e8:	2904      	cmp	r1, #4
	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 80001ea:	7028      	strb	r0, [r5, #0]

	if( FLASHStatus != FLASH_COMPLETE )
 80001ec:	d002      	beq.n	80001f4 <Ap_ST32BL_EraseFlash+0x3c>
	{
		FLASH_Lock();
 80001ee:	4807      	ldr	r0, [pc, #28]	; (800020c <Ap_ST32BL_EraseFlash+0x54>)
 80001f0:	4780      	blx	r0
		Ret = FALSE;
 80001f2:	4620      	mov	r0, r4
	}

	return Ret;
}
 80001f4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80001f6:	bf00      	nop
 80001f8:	08002075 	.word	0x08002075
 80001fc:	0800209d 	.word	0x0800209d
 8000200:	200002cb 	.word	0x200002cb
 8000204:	08003000 	.word	0x08003000
 8000208:	08002155 	.word	0x08002155
 800020c:	0800208d 	.word	0x0800208d

08000210 <Ap_ST32BL_CheckFlashSector>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_CheckFlashSector( u32 Address )
{
 8000210:	b573      	push	{r0, r1, r4, r5, r6, lr}
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 8000212:	4911      	ldr	r1, [pc, #68]	; (8000258 <Ap_ST32BL_CheckFlashSector+0x48>)
	u8  Ret = TRUE;
	u32 PageCount;

	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 8000214:	2304      	movs	r3, #4


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 8000216:	4288      	cmp	r0, r1
	u8  Ret = TRUE;
	u32 PageCount;

	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 8000218:	f88d 3007 	strb.w	r3, [sp, #7]


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 800021c:	d919      	bls.n	8000252 <Ap_ST32BL_CheckFlashSector+0x42>


	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;
 800021e:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8000222:	f5a4 5040 	sub.w	r0, r4, #12288	; 0x3000


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
 8000226:	4e0d      	ldr	r6, [pc, #52]	; (800025c <Ap_ST32BL_CheckFlashSector+0x4c>)


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;


	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;
 8000228:	0a84      	lsrs	r4, r0, #10


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
 800022a:	5d35      	ldrb	r5, [r6, r4]
 800022c:	b10d      	cbz	r5, 8000232 <Ap_ST32BL_CheckFlashSector+0x22>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_CheckFlashSector( u32 Address )
{
	u8  Ret = TRUE;
 800022e:	2001      	movs	r0, #1
 8000230:	e010      	b.n	8000254 <Ap_ST32BL_CheckFlashSector+0x44>
	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));
 8000232:	f504 3200 	add.w	r2, r4, #131072	; 0x20000
 8000236:	320c      	adds	r2, #12
 8000238:	0290      	lsls	r0, r2, #10
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <Ap_ST32BL_CheckFlashSector+0x50>)
 800023c:	4798      	blx	r3
 800023e:	f88d 0007 	strb.w	r0, [sp, #7]

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;

		if( FLASHStatus != FLASH_COMPLETE )
 8000242:	f89d 0007 	ldrb.w	r0, [sp, #7]

	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 8000246:	2101      	movs	r1, #1

		if( FLASHStatus != FLASH_COMPLETE )
 8000248:	2804      	cmp	r0, #4

	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 800024a:	5531      	strb	r1, [r6, r4]

		if( FLASHStatus != FLASH_COMPLETE )
 800024c:	d0ef      	beq.n	800022e <Ap_ST32BL_CheckFlashSector+0x1e>
		{
			FLASH_Lock();
 800024e:	4a05      	ldr	r2, [pc, #20]	; (8000264 <Ap_ST32BL_CheckFlashSector+0x54>)
 8000250:	4790      	blx	r2
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 8000252:	2000      	movs	r0, #0
		}
	}


	return Ret;
}
 8000254:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8000256:	bf00      	nop
 8000258:	08002fff 	.word	0x08002fff
 800025c:	200002cb 	.word	0x200002cb
 8000260:	08002155 	.word	0x08002155
 8000264:	0800208d 	.word	0x0800208d

08000268 <Ap_ST32BL_WriteFlash>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
{
 8000268:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	u32 DataIndex;
	u8	Ret = TRUE;
	volatile FLASH_Status FLASHStatus;


	WriteSize = DataSize / 4;	// 32Bit로 변경 
 800026c:	0895      	lsrs	r5, r2, #2

	if( (WriteSize%4) > 0 ) WriteSize++;
 800026e:	07ab      	lsls	r3, r5, #30


	//-- 섹터가 지워졌는지 검사
	//
	if( Ap_ST32BL_CheckFlashSector(Address) == FALSE )
 8000270:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <Ap_ST32BL_WriteFlash+0x58>)
	volatile FLASH_Status FLASHStatus;


	WriteSize = DataSize / 4;	// 32Bit로 변경 

	if( (WriteSize%4) > 0 ) WriteSize++;
 8000272:	bf18      	it	ne
 8000274:	3501      	addne	r5, #1
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
{
 8000276:	4607      	mov	r7, r0
 8000278:	4688      	mov	r8, r1
	if( (WriteSize%4) > 0 ) WriteSize++;


	//-- 섹터가 지워졌는지 검사
	//
	if( Ap_ST32BL_CheckFlashSector(Address) == FALSE )
 800027a:	4798      	blx	r3
 800027c:	b110      	cbz	r0, 8000284 <Ap_ST32BL_WriteFlash+0x1c>
 800027e:	4644      	mov	r4, r8
 8000280:	2600      	movs	r6, #0
 8000282:	e018      	b.n	80002b6 <Ap_ST32BL_WriteFlash+0x4e>
	{
		return FALSE;
 8000284:	2000      	movs	r0, #0
 8000286:	e019      	b.n	80002bc <Ap_ST32BL_WriteFlash+0x54>
	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 8000288:	7860      	ldrb	r0, [r4, #1]
		WriteData |= pData[ DataIndex++ ] << 16;
 800028a:	78a1      	ldrb	r1, [r4, #2]
	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 800028c:	0203      	lsls	r3, r0, #8

	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
 800028e:	7822      	ldrb	r2, [r4, #0]
		WriteData |= pData[ DataIndex++ ] << 8;
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		WriteData |= pData[ DataIndex++ ] << 16;
		WriteData |= pData[ DataIndex++ ] << 24;
 8000294:	78e1      	ldrb	r1, [r4, #3]

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
		WriteData |= pData[ DataIndex++ ] << 16;
 8000296:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
     TITLE   : Ap_ST32BL_WriteFlash
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
 800029a:	ebc8 0207 	rsb	r2, r8, r7
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
		WriteData |= pData[ DataIndex++ ] << 16;
		WriteData |= pData[ DataIndex++ ] << 24;

		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);
 800029e:	1910      	adds	r0, r2, r4
 80002a0:	4319      	orrs	r1, r3
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <Ap_ST32BL_WriteFlash+0x5c>)
 80002a4:	4798      	blx	r3
 80002a6:	f88d 0007 	strb.w	r0, [sp, #7]

		if( FLASHStatus != FLASH_COMPLETE )
 80002aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80002ae:	3404      	adds	r4, #4
 80002b0:	2804      	cmp	r0, #4
 80002b2:	d1e7      	bne.n	8000284 <Ap_ST32BL_WriteFlash+0x1c>
	}


	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
 80002b4:	3601      	adds	r6, #1
 80002b6:	42ae      	cmp	r6, r5
 80002b8:	d1e6      	bne.n	8000288 <Ap_ST32BL_WriteFlash+0x20>
	u32 StartAddress = Address;
	u32 WriteSize;
	u32 WriteData;
	u32 i;
	u32 DataIndex;
	u8	Ret = TRUE;
 80002ba:	2001      	movs	r0, #1
			break;
		}
	}

	return Ret;
}
 80002bc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 80002c0:	08000211 	.word	0x08000211
 80002c4:	08002109 	.word	0x08002109

080002c8 <Ap_ST32BL_JumpToApp>:
	u32 	  RegData;

	//JumpToAddress = (pFunction)(HW_ST32BL_FLASH_START_ADDRESS + 4);


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <Ap_ST32BL_JumpToApp+0x28>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_JumpToApp( u32 Address )
{
 80002ca:	b510      	push	{r4, lr}

	JumpToApp = (pFunction) JumpAddress;


	//Lb_printf("jump..\n");
	Hw_Timer_Delay_ms(100);
 80002cc:	2064      	movs	r0, #100	; 0x64
 80002ce:	4909      	ldr	r1, [pc, #36]	; (80002f4 <Ap_ST32BL_JumpToApp+0x2c>)


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
	

	JumpToApp = (pFunction) JumpAddress;
 80002d0:	681c      	ldr	r4, [r3, #0]


	//Lb_printf("jump..\n");
	Hw_Timer_Delay_ms(100);
 80002d2:	4788      	blx	r1

	//REG_RCC_AHBENR  = 0x00000014;
	//REG_RCC_APB1ENR = 0x00000000;
	//REG_RCC_APB2ENR = 0x00000000;	

	PowerOff();
 80002d4:	4808      	ldr	r0, [pc, #32]	; (80002f8 <Ap_ST32BL_JumpToApp+0x30>)
 80002d6:	4780      	blx	r0

    REG_SCB_VTOR = (uint32_t)0x08000000;     /* Vector Table Relocation in Internal FLASH. */
#endif


	REG_RCC_APB1RSTR = 0xFFFFFFFF;
 80002d8:	4908      	ldr	r1, [pc, #32]	; (80002fc <Ap_ST32BL_JumpToApp+0x34>)
	REG_RCC_APB2RSTR = 0xFFFFFFFF;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <Ap_ST32BL_JumpToApp+0x38>)

    REG_SCB_VTOR = (uint32_t)0x08000000;     /* Vector Table Relocation in Internal FLASH. */
#endif


	REG_RCC_APB1RSTR = 0xFFFFFFFF;
 80002dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	REG_RCC_APB2RSTR = 0xFFFFFFFF;
	REG_RCC_APB1RSTR = 0x00000000;
 80002e0:	2000      	movs	r0, #0

    REG_SCB_VTOR = (uint32_t)0x08000000;     /* Vector Table Relocation in Internal FLASH. */
#endif


	REG_RCC_APB1RSTR = 0xFFFFFFFF;
 80002e2:	600a      	str	r2, [r1, #0]
	REG_RCC_APB2RSTR = 0xFFFFFFFF;
 80002e4:	601a      	str	r2, [r3, #0]
	REG_RCC_APB1RSTR = 0x00000000;
 80002e6:	6008      	str	r0, [r1, #0]
	REG_RCC_APB2RSTR = 0x00000000;
 80002e8:	6018      	str	r0, [r3, #0]
    /* Disable all interrupts and clear pending bits  */
    //REG_RCC_CIR = 0x009F0000;



	JumpToApp();
 80002ea:	47a0      	blx	r4
 80002ec:	bd10      	pop	{r4, pc}
 80002ee:	bf00      	nop
 80002f0:	08003004 	.word	0x08003004
 80002f4:	08000999 	.word	0x08000999
 80002f8:	08001095 	.word	0x08001095
 80002fc:	40021010 	.word	0x40021010
 8000300:	4002100c 	.word	0x4002100c

08000304 <Ap_ST32BL_Main>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Main( void )
{
 8000304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000308:	b0cd      	sub	sp, #308	; 0x134
	while(1)
	{
		//Hw_Uart_Printf(HW_UART_VCOM, "ST32BL\n");
		//Hw_Timer_Delay_ms(500);

		Cmd = Ap_ST32BL_WaitCmd();
 800030a:	4b40      	ldr	r3, [pc, #256]	; (800040c <Ap_ST32BL_Main+0x108>)
 800030c:	4798      	blx	r3
		{

		}


		if( Cmd == STM32_CMD_GET_COMMAND )
 800030e:	b918      	cbnz	r0, 8000318 <Ap_ST32BL_Main+0x14>
		{
			Ap_ST32BL_SendByte(0x00);
 8000310:	4f3f      	ldr	r7, [pc, #252]	; (8000410 <Ap_ST32BL_Main+0x10c>)
 8000312:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x22);
 8000314:	2022      	movs	r0, #34	; 0x22
 8000316:	e007      	b.n	8000328 <Ap_ST32BL_Main+0x24>
			Ap_ST32BL_SendByte(STM32_COMM_ACK);
		}


		if( Cmd == STM32_CMD_GET_ID )
 8000318:	2802      	cmp	r0, #2
 800031a:	d109      	bne.n	8000330 <Ap_ST32BL_Main+0x2c>
		{
			Ap_ST32BL_SendByte(0x01);
 800031c:	2001      	movs	r0, #1
 800031e:	4f3c      	ldr	r7, [pc, #240]	; (8000410 <Ap_ST32BL_Main+0x10c>)
 8000320:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x04);
 8000322:	2004      	movs	r0, #4
 8000324:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x10);
 8000326:	2010      	movs	r0, #16
 8000328:	47b8      	blx	r7
			Ap_ST32BL_SendByte(STM32_COMM_ACK);			
 800032a:	2079      	movs	r0, #121	; 0x79
 800032c:	47b8      	blx	r7
 800032e:	e7ec      	b.n	800030a <Ap_ST32BL_Main+0x6>
		}


		if( Cmd == STM32_CMD_ERASE_FLASH )
 8000330:	2843      	cmp	r0, #67	; 0x43
 8000332:	d10c      	bne.n	800034e <Ap_ST32BL_Main+0x4a>
		{
			Resp[0] = Ap_ST32BL_ReceiveByte();
 8000334:	4e37      	ldr	r6, [pc, #220]	; (8000414 <Ap_ST32BL_Main+0x110>)
 8000336:	47b0      	blx	r6
 8000338:	f88d 0004 	strb.w	r0, [sp, #4]
			Resp[1] = Ap_ST32BL_ReceiveByte();
 800033c:	47b0      	blx	r6


			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 800033e:	4a36      	ldr	r2, [pc, #216]	; (8000418 <Ap_ST32BL_Main+0x114>)


		if( Cmd == STM32_CMD_ERASE_FLASH )
		{
			Resp[0] = Ap_ST32BL_ReceiveByte();
			Resp[1] = Ap_ST32BL_ReceiveByte();
 8000340:	f88d 0005 	strb.w	r0, [sp, #5]


			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000344:	4790      	blx	r2
 8000346:	2801      	cmp	r0, #1
 8000348:	d13a      	bne.n	80003c0 <Ap_ST32BL_Main+0xbc>
 800034a:	2079      	movs	r0, #121	; 0x79
 800034c:	e039      	b.n	80003c2 <Ap_ST32BL_Main+0xbe>
		}




		if( Cmd == STM32_CMD_WRITE_FLASH )
 800034e:	2831      	cmp	r0, #49	; 0x31
 8000350:	d13c      	bne.n	80003cc <Ap_ST32BL_Main+0xc8>
 8000352:	2500      	movs	r5, #0
 8000354:	462e      	mov	r6, r5
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 8000356:	4f2f      	ldr	r7, [pc, #188]	; (8000414 <Ap_ST32BL_Main+0x110>)
 8000358:	47b8      	blx	r7
 800035a:	ac01      	add	r4, sp, #4
 800035c:	5530      	strb	r0, [r6, r4]
		{

			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
 800035e:	3601      	adds	r6, #1
 8000360:	2e04      	cmp	r6, #4
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
 8000362:	ea85 0500 	eor.w	r5, r5, r0
		{

			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
 8000366:	d1f6      	bne.n	8000356 <Ap_ST32BL_Main+0x52>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 8000368:	47b8      	blx	r7

			Address  = Resp[0] << 24;
 800036a:	f894 9000 	ldrb.w	r9, [r4]
			Address |= Resp[1] << 16;
 800036e:	7863      	ldrb	r3, [r4, #1]
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
 8000370:	ea4f 6209 	mov.w	r2, r9, lsl #24
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 8000374:	78a7      	ldrb	r7, [r4, #2]
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
 8000376:	ea42 4103 	orr.w	r1, r2, r3, lsl #16
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;
 800037a:	78e4      	ldrb	r4, [r4, #3]
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 800037c:	ea41 2607 	orr.w	r6, r1, r7, lsl #8

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Addrr %x %x %x %x %x %x\r\n", Resp[0], Resp[1], Resp[2], Resp[3], CheckSum, CheckSumCalc );
			#endif		

			if( CheckSum == CheckSumCalc )
 8000380:	42a8      	cmp	r0, r5
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;
 8000382:	ea46 0904 	orr.w	r9, r6, r4
 8000386:	4d22      	ldr	r5, [pc, #136]	; (8000410 <Ap_ST32BL_Main+0x10c>)

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Addrr %x %x %x %x %x %x\r\n", Resp[0], Resp[1], Resp[2], Resp[3], CheckSum, CheckSumCalc );
			#endif		

			if( CheckSum == CheckSumCalc )
 8000388:	d11e      	bne.n	80003c8 <Ap_ST32BL_Main+0xc4>
			{
				Ap_ST32BL_SendByte(STM32_COMM_ACK);
 800038a:	2079      	movs	r0, #121	; 0x79
				Hw_Uart_Printf(HW_UART_COM1, "ACK\r\n");
				#endif	
			}
			else
			{
				Ap_ST32BL_SendByte(STM32_COMM_NACK);	
 800038c:	47a8      	blx	r5


			//-- Receive Data
			//
			CheckSumCalc = 0;
			Length  = Ap_ST32BL_ReceiveByte();
 800038e:	4821      	ldr	r0, [pc, #132]	; (8000414 <Ap_ST32BL_Main+0x110>)
 8000390:	4780      	blx	r0

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 8000392:	2500      	movs	r5, #0


			//-- Receive Data
			//
			CheckSumCalc = 0;
			Length  = Ap_ST32BL_ReceiveByte();
 8000394:	4604      	mov	r4, r0
			CheckSumCalc ^= Length;
			Length++;
 8000396:	1c46      	adds	r6, r0, #1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 8000398:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8000414 <Ap_ST32BL_Main+0x110>
 800039c:	47c0      	blx	r8
 800039e:	af01      	add	r7, sp, #4
 80003a0:	55e8      	strb	r0, [r5, r7]

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 80003a2:	3501      	adds	r5, #1
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
 80003a4:	4044      	eors	r4, r0

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 80003a6:	42b5      	cmp	r5, r6
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
 80003a8:	b2e4      	uxtb	r4, r4

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 80003aa:	d3f5      	bcc.n	8000398 <Ap_ST32BL_Main+0x94>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 80003ac:	47c0      	blx	r8


			//-- Flash Write
			//

			Ret = Ap_ST32BL_WriteFlash( Address + HW_ST32BL_FLASH_ADDRESS_OFFSET, Resp, Length );
 80003ae:	4639      	mov	r1, r7
			for( i=0; i<Length; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 80003b0:	4605      	mov	r5, r0


			//-- Flash Write
			//

			Ret = Ap_ST32BL_WriteFlash( Address + HW_ST32BL_FLASH_ADDRESS_OFFSET, Resp, Length );
 80003b2:	4632      	mov	r2, r6
 80003b4:	f509 5040 	add.w	r0, r9, #12288	; 0x3000
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <Ap_ST32BL_Main+0x118>)
 80003ba:	4798      	blx	r3

		
			if( CheckSum == CheckSumCalc && Ret == TRUE ) 	
 80003bc:	42a5      	cmp	r5, r4
 80003be:	d0c2      	beq.n	8000346 <Ap_ST32BL_Main+0x42>
			Resp[0] = Ap_ST32BL_ReceiveByte();
			Resp[1] = Ap_ST32BL_ReceiveByte();


			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
			else									Ap_ST32BL_SendByte(STM32_COMM_NACK);
 80003c0:	201f      	movs	r0, #31
 80003c2:	4913      	ldr	r1, [pc, #76]	; (8000410 <Ap_ST32BL_Main+0x10c>)
 80003c4:	4788      	blx	r1
 80003c6:	e7a0      	b.n	800030a <Ap_ST32BL_Main+0x6>
				Hw_Uart_Printf(HW_UART_COM1, "ACK\r\n");
				#endif	
			}
			else
			{
				Ap_ST32BL_SendByte(STM32_COMM_NACK);	
 80003c8:	201f      	movs	r0, #31
 80003ca:	e7df      	b.n	800038c <Ap_ST32BL_Main+0x88>
		}
		

		//-- Go Command
		//
		if( Cmd == STM32_CMD_GO )
 80003cc:	2821      	cmp	r0, #33	; 0x21
 80003ce:	d19c      	bne.n	800030a <Ap_ST32BL_Main+0x6>
 80003d0:	2500      	movs	r5, #0
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 80003d2:	4e10      	ldr	r6, [pc, #64]	; (8000414 <Ap_ST32BL_Main+0x110>)
 80003d4:	47b0      	blx	r6
 80003d6:	ac01      	add	r4, sp, #4
 80003d8:	5560      	strb	r0, [r4, r5]
		if( Cmd == STM32_CMD_GO )
		{
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
 80003da:	3501      	adds	r5, #1
 80003dc:	2d04      	cmp	r5, #4
 80003de:	d1f8      	bne.n	80003d2 <Ap_ST32BL_Main+0xce>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 80003e0:	47b0      	blx	r6

			Address  = Resp[0] << 24;
 80003e2:	7822      	ldrb	r2, [r4, #0]
			Address |= Resp[1] << 16;
 80003e4:	7860      	ldrb	r0, [r4, #1]
			Address |= Resp[2] <<  8;
 80003e6:	78a3      	ldrb	r3, [r4, #2]
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
 80003e8:	0617      	lsls	r7, r2, #24
			Address |= Resp[1] << 16;
 80003ea:	ea47 4100 	orr.w	r1, r7, r0, lsl #16
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;	
 80003ee:	78e4      	ldrb	r4, [r4, #3]
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 80003f0:	ea41 2603 	orr.w	r6, r1, r3, lsl #8
			Address |= Resp[3] <<  0;	
			

			Ap_ST32BL_SendByte(STM32_COMM_ACK);	
 80003f4:	2079      	movs	r0, #121	; 0x79
 80003f6:	4a06      	ldr	r2, [pc, #24]	; (8000410 <Ap_ST32BL_Main+0x10c>)
 80003f8:	4790      	blx	r2
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;	
 80003fa:	ea46 0504 	orr.w	r5, r6, r4
			

			Ap_ST32BL_SendByte(STM32_COMM_ACK);	

			Hw_Timer_Delay_ms(100);
 80003fe:	2064      	movs	r0, #100	; 0x64
 8000400:	4f07      	ldr	r7, [pc, #28]	; (8000420 <Ap_ST32BL_Main+0x11c>)
 8000402:	47b8      	blx	r7

			//-- Go
			//
			Ap_ST32BL_JumpToApp( Address );
 8000404:	4628      	mov	r0, r5
 8000406:	4907      	ldr	r1, [pc, #28]	; (8000424 <Ap_ST32BL_Main+0x120>)
 8000408:	4788      	blx	r1
 800040a:	e77e      	b.n	800030a <Ap_ST32BL_Main+0x6>
 800040c:	08000161 	.word	0x08000161
 8000410:	08000135 	.word	0x08000135
 8000414:	0800014d 	.word	0x0800014d
 8000418:	080001b9 	.word	0x080001b9
 800041c:	08000269 	.word	0x08000269
 8000420:	08000999 	.word	0x08000999
 8000424:	080002c9 	.word	0x080002c9

08000428 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8000428:	4668      	mov	r0, sp
 800042a:	f020 0107 	bic.w	r1, r0, #7
 800042e:	468d      	mov	sp, r1
 8000430:	b501      	push	{r0, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000432:	2300      	movs	r3, #0
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 8000434:	4a2d      	ldr	r2, [pc, #180]	; (80004ec <zero_loop+0x9c>)
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000436:	492e      	ldr	r1, [pc, #184]	; (80004f0 <zero_loop+0xa0>)
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 8000438:	1898      	adds	r0, r3, r2
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800043a:	4288      	cmp	r0, r1
 800043c:	d204      	bcs.n	8000448 <Hw_StartUp_Init+0x20>
	{
		*(pulDest++) = *(pulSrc++);
 800043e:	482d      	ldr	r0, [pc, #180]	; (80004f4 <zero_loop+0xa4>)
 8000440:	5819      	ldr	r1, [r3, r0]
 8000442:	5099      	str	r1, [r3, r2]
 8000444:	3304      	adds	r3, #4
 8000446:	e7f5      	b.n	8000434 <Hw_StartUp_Init+0xc>
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 8000448:	4833      	ldr	r0, [pc, #204]	; (8000518 <zero_loop+0xc8>)
 800044a:	4934      	ldr	r1, [pc, #208]	; (800051c <zero_loop+0xcc>)
 800044c:	f04f 0200 	mov.w	r2, #0

08000450 <zero_loop>:
 8000450:	4288      	cmp	r0, r1
 8000452:	bfb8      	it	lt
 8000454:	f840 2b04 	strlt.w	r2, [r0], #4
 8000458:	f6ff affa 	blt.w	8000450 <zero_loop>
    

#if 1
    /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
    /* Set HSION bit */
    REG_RCC_CR |= (uint32_t) 0x00000001;
 800045c:	4b26      	ldr	r3, [pc, #152]	; (80004f8 <zero_loop+0xa8>)

    /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
    REG_RCC_CFGR &= (uint32_t) 0xF8FF0000;
 800045e:	4927      	ldr	r1, [pc, #156]	; (80004fc <zero_loop+0xac>)
    

#if 1
    /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
    /* Set HSION bit */
    REG_RCC_CR |= (uint32_t) 0x00000001;
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	f042 0001 	orr.w	r0, r2, #1

    /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
    REG_RCC_CFGR &= (uint32_t) 0xF8FF0000;
 8000466:	4a26      	ldr	r2, [pc, #152]	; (8000500 <zero_loop+0xb0>)
    

#if 1
    /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
    /* Set HSION bit */
    REG_RCC_CR |= (uint32_t) 0x00000001;
 8000468:	6018      	str	r0, [r3, #0]

    /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
    REG_RCC_CFGR &= (uint32_t) 0xF8FF0000;
 800046a:	6810      	ldr	r0, [r2, #0]
 800046c:	4001      	ands	r1, r0
 800046e:	6011      	str	r1, [r2, #0]

    /* Reset HSEON, CSSON and PLLON bits */
    REG_RCC_CR &= (uint32_t) 0xFEF6FFFF;
 8000470:	6818      	ldr	r0, [r3, #0]
 8000472:	f020 7184 	bic.w	r1, r0, #17301504	; 0x1080000
 8000476:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800047a:	6018      	str	r0, [r3, #0]

    /* Reset HSEBYP bit */
    REG_RCC_CR &= (uint32_t) 0xFFFBFFFF;
 800047c:	6819      	ldr	r1, [r3, #0]
 800047e:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 8000482:	6018      	str	r0, [r3, #0]

    /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
    REG_RCC_CFGR &= (uint32_t) 0xFF80FFFF;
 8000484:	6811      	ldr	r1, [r2, #0]
 8000486:	f421 00fe 	bic.w	r0, r1, #8323072	; 0x7f0000

    /* Disable all interrupts and clear pending bits  */
    REG_RCC_CIR = 0x009F0000;
 800048a:	f44f 011f 	mov.w	r1, #10420224	; 0x9f0000

    /* Reset HSEBYP bit */
    REG_RCC_CR &= (uint32_t) 0xFFFBFFFF;

    /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
    REG_RCC_CFGR &= (uint32_t) 0xFF80FFFF;
 800048e:	6010      	str	r0, [r2, #0]

    /* Disable all interrupts and clear pending bits  */
    REG_RCC_CIR = 0x009F0000;
 8000490:	6051      	str	r1, [r2, #4]

    REG_SCB_VTOR = (uint32_t)0x08000000;     /* Vector Table Relocation in Internal FLASH. */
 8000492:	4a1c      	ldr	r2, [pc, #112]	; (8000504 <zero_loop+0xb4>)
 8000494:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000498:	6010      	str	r0, [r2, #0]
#endif


  REG_RCC_APB1RSTR = 0xFFFFFFFF;
 800049a:	481b      	ldr	r0, [pc, #108]	; (8000508 <zero_loop+0xb8>)
  REG_RCC_APB2RSTR = 0xFFFFFFFF;
 800049c:	4a1b      	ldr	r2, [pc, #108]	; (800050c <zero_loop+0xbc>)

    REG_SCB_VTOR = (uint32_t)0x08000000;     /* Vector Table Relocation in Internal FLASH. */
#endif


  REG_RCC_APB1RSTR = 0xFFFFFFFF;
 800049e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004a2:	6001      	str	r1, [r0, #0]
  REG_RCC_APB2RSTR = 0xFFFFFFFF;
 80004a4:	6011      	str	r1, [r2, #0]
  REG_RCC_APB1RSTR = 0x00000000;
 80004a6:	2100      	movs	r1, #0
 80004a8:	6001      	str	r1, [r0, #0]
  REG_RCC_APB2RSTR = 0x00000000;
 80004aa:	6011      	str	r1, [r2, #0]
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR  |= (1<<16);	
 80004ac:	6818      	ldr	r0, [r3, #0]
 80004ae:	f440 3280 	orr.w	r2, r0, #65536	; 0x10000
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	f642 4310 	movw	r3, #11280	; 0x2c10
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 80004b8:	490f      	ldr	r1, [pc, #60]	; (80004f8 <zero_loop+0xa8>)
 80004ba:	6808      	ldr	r0, [r1, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 11280) );
 80004bc:	0382      	lsls	r2, r0, #14
 80004be:	d401      	bmi.n	80004c4 <zero_loop+0x74>
 80004c0:	3b01      	subs	r3, #1
 80004c2:	d1f9      	bne.n	80004b8 <zero_loop+0x68>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 80004c4:	4912      	ldr	r1, [pc, #72]	; (8000510 <zero_loop+0xc0>)
 80004c6:	680a      	ldr	r2, [r1, #0]
 80004c8:	f042 0010 	orr.w	r0, r2, #16
 80004cc:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 80004ce:	680b      	ldr	r3, [r1, #0]
 80004d0:	f023 0203 	bic.w	r2, r3, #3
 80004d4:	600a      	str	r2, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 80004d6:	6808      	ldr	r0, [r1, #0]
 80004d8:	f040 0302 	orr.w	r3, r0, #2
 80004dc:	600b      	str	r3, [r1, #0]


    main();
 80004de:	490d      	ldr	r1, [pc, #52]	; (8000514 <zero_loop+0xc4>)
 80004e0:	4788      	blx	r1

}
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 80004e6:	4685      	mov	sp, r0
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000000 	.word	0x20000000
 80004f0:	200000e4 	.word	0x200000e4
 80004f4:	0800224c 	.word	0x0800224c
 80004f8:	40021000 	.word	0x40021000
 80004fc:	f8ff0000 	.word	0xf8ff0000
 8000500:	40021004 	.word	0x40021004
 8000504:	e000ed08 	.word	0xe000ed08
 8000508:	40021010 	.word	0x40021010
 800050c:	4002100c 	.word	0x4002100c
 8000510:	40022000 	.word	0x40022000
 8000514:	08000019 	.word	0x08000019
 8000518:	20000200 	.word	0x20000200
 800051c:	2000132c 	.word	0x2000132c

08000520 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8000520:	b508      	push	{r3, lr}
	u32 i;

	//-- PLL 설정
	//
	Hw_PLL_Init();
 8000522:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <Hw_Init+0x38>)
 8000524:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 8000526:	480d      	ldr	r0, [pc, #52]	; (800055c <Hw_Init+0x3c>)
 8000528:	4780      	blx	r0
	

	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800052a:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <Hw_Init+0x40>)
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800052c:	490d      	ldr	r1, [pc, #52]	; (8000564 <Hw_Init+0x44>)
	Hw_ISR_Init();
	

	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800052e:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 8000532:	6013      	str	r3, [r2, #0]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <Hw_Init+0x48>)
	

	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000536:	6051      	str	r1, [r2, #4]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8000538:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800053c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <Hw_Init+0x4c>)


	//Hw_DMA_Init();
	Hw_Uart_Init();
 8000542:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <Hw_Init+0x50>)
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000544:	6018      	str	r0, [r3, #0]


	//Hw_DMA_Init();
	Hw_Uart_Init();
 8000546:	4790      	blx	r2
	Hw_Timer_Init();
 8000548:	490a      	ldr	r1, [pc, #40]	; (8000574 <Hw_Init+0x54>)
 800054a:	4788      	blx	r1
	Hw_VCom_Init();
 800054c:	480a      	ldr	r0, [pc, #40]	; (8000578 <Hw_Init+0x58>)
 800054e:	4780      	blx	r0
	Hw_Led_Init();	
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <Hw_Init+0x5c>)
 8000552:	4798      	blx	r3
 8000554:	bd08      	pop	{r3, pc}
 8000556:	bf00      	nop
 8000558:	080007ad 	.word	0x080007ad
 800055c:	08000831 	.word	0x08000831
 8000560:	40010800 	.word	0x40010800
 8000564:	333334b3 	.word	0x333334b3
 8000568:	33444444 	.word	0x33444444
 800056c:	40011004 	.word	0x40011004
 8000570:	080006f5 	.word	0x080006f5
 8000574:	080008b1 	.word	0x080008b1
 8000578:	08000b1d 	.word	0x08000b1d
 800057c:	08000ac5 	.word	0x08000ac5

08000580 <Hw_ISR_UART2_Handler>:


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 8000580:	b507      	push	{r0, r1, r2, lr}
	u8 UartData;
				
	UartData = REG_USART2_DR;
 8000582:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <Hw_ISR_UART2_Handler+0x20>)
 8000584:	a902      	add	r1, sp, #8
 8000586:	6818      	ldr	r0, [r3, #0]
	

	Hw_Uart_Q_Push( 1, &UartData );
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <Hw_ISR_UART2_Handler+0x24>)
//
void Hw_ISR_UART2_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART2_DR;
 800058a:	f801 0d01 	strb.w	r0, [r1, #-1]!
	

	Hw_Uart_Q_Push( 1, &UartData );
 800058e:	2001      	movs	r0, #1
 8000590:	4790      	blx	r2

	if( Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr != NULL )
 8000592:	4905      	ldr	r1, [pc, #20]	; (80005a8 <Hw_ISR_UART2_Handler+0x28>)
 8000594:	694b      	ldr	r3, [r1, #20]
 8000596:	b113      	cbz	r3, 800059e <Hw_ISR_UART2_Handler+0x1e>
	{
		(*Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr)(UartData);	
 8000598:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800059c:	4798      	blx	r3
	} 
}
 800059e:	bd0e      	pop	{r1, r2, r3, pc}
 80005a0:	40004404 	.word	0x40004404
 80005a4:	08000a05 	.word	0x08000a05
 80005a8:	2000034c 	.word	0x2000034c

080005ac <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80005ac:	b507      	push	{r0, r1, r2, lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <Hw_ISR_UART1_Handler+0x20>)
 80005b0:	a902      	add	r1, sp, #8
 80005b2:	6818      	ldr	r0, [r3, #0]
	
	Hw_Uart_Q_Push( 0, &UartData );
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <Hw_ISR_UART1_Handler+0x24>)
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80005b6:	f801 0d01 	strb.w	r0, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 80005ba:	2000      	movs	r0, #0
 80005bc:	4790      	blx	r2

	if( Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr != NULL )
 80005be:	4905      	ldr	r1, [pc, #20]	; (80005d4 <Hw_ISR_UART1_Handler+0x28>)
 80005c0:	688b      	ldr	r3, [r1, #8]
 80005c2:	b113      	cbz	r3, 80005ca <Hw_ISR_UART1_Handler+0x1e>
	{
		(*Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr)(UartData);	
 80005c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80005c8:	4798      	blx	r3
	} 
}
 80005ca:	bd0e      	pop	{r1, r2, r3, pc}
 80005cc:	40013804 	.word	0x40013804
 80005d0:	08000a05 	.word	0x08000a05
 80005d4:	2000034c 	.word	0x2000034c

080005d8 <Hw_Uart_Putch.part.0>:
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
	{
		case HW_UART_COM1:
		    while( !(REG_USART1_SR & 0x80) );
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <Hw_Uart_Putch.part.0+0x10>)
 80005da:	6819      	ldr	r1, [r3, #0]
 80005dc:	060b      	lsls	r3, r1, #24
 80005de:	d5fb      	bpl.n	80005d8 <Hw_Uart_Putch.part.0>
    		REG_USART1_DR = Uart_PutData;
 80005e0:	4a02      	ldr	r2, [pc, #8]	; (80005ec <Hw_Uart_Putch.part.0+0x14>)
 80005e2:	6010      	str	r0, [r2, #0]
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40013800 	.word	0x40013800
 80005ec:	40013804 	.word	0x40013804

080005f0 <Hw_Uart_Open_COM1>:
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <Hw_Uart_Open_COM1+0x4c>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 80005f2:	b510      	push	{r4, lr}

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 80005f4:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80005f6:	4812      	ldr	r0, [pc, #72]	; (8000640 <Hw_Uart_Open_COM1+0x50>)
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 80005f8:	6099      	str	r1, [r3, #8]
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80005fa:	6802      	ldr	r2, [r0, #0]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80005fc:	4c11      	ldr	r4, [pc, #68]	; (8000644 <Hw_Uart_Open_COM1+0x54>)
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80005fe:	f442 4180 	orr.w	r1, r2, #16384	; 0x4000
 8000602:	6001      	str	r1, [r0, #0]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000604:	230c      	movs	r3, #12
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000606:	4810      	ldr	r0, [pc, #64]	; (8000648 <Hw_Uart_Open_COM1+0x58>)
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000608:	6023      	str	r3, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800060a:	2200      	movs	r2, #0
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <Hw_Uart_Open_COM1+0x5c>)
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800060e:	f240 2171 	movw	r1, #625	; 0x271
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000612:	6002      	str	r2, [r0, #0]
	REG_USART1_CR3  = 0;
 8000614:	6042      	str	r2, [r0, #4]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000616:	f840 1c08 	str.w	r1, [r0, #-8]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800061a:	6818      	ldr	r0, [r3, #0]
 800061c:	f040 0120 	orr.w	r1, r0, #32
 8000620:	6019      	str	r1, [r3, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8000622:	6823      	ldr	r3, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000624:	490a      	ldr	r1, [pc, #40]	; (8000650 <Hw_Uart_Open_COM1+0x60>)
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8000626:	f043 0020 	orr.w	r0, r3, #32
 800062a:	6020      	str	r0, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <Hw_Uart_Open_COM1+0x64>)
 800062e:	2025      	movs	r0, #37	; 0x25
 8000630:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8000632:	6822      	ldr	r2, [r4, #0]
 8000634:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 8000638:	6021      	str	r1, [r4, #0]
 800063a:	bd10      	pop	{r4, pc}
 800063c:	2000034c 	.word	0x2000034c
 8000640:	40021018 	.word	0x40021018
 8000644:	4001380c 	.word	0x4001380c
 8000648:	40013810 	.word	0x40013810
 800064c:	e000e104 	.word	0xe000e104
 8000650:	080005ad 	.word	0x080005ad
 8000654:	08000841 	.word	0x08000841

08000658 <Hw_Uart_Open_COM2>:
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <Hw_Uart_Open_COM2+0x7c>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 800065a:	b510      	push	{r4, lr}

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 800065c:	6118      	str	r0, [r3, #16]
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 800065e:	481e      	ldr	r0, [pc, #120]	; (80006d8 <Hw_Uart_Open_COM2+0x80>)
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 8000660:	4c1e      	ldr	r4, [pc, #120]	; (80006dc <Hw_Uart_Open_COM2+0x84>)
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 8000662:	6802      	ldr	r2, [r0, #0]
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
 8000664:	6159      	str	r1, [r3, #20]
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 8000666:	f442 3100 	orr.w	r1, r2, #131072	; 0x20000
 800066a:	6001      	str	r1, [r0, #0]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800066c:	6823      	ldr	r3, [r4, #0]
 800066e:	f423 6070 	bic.w	r0, r3, #3840	; 0xf00
 8000672:	6020      	str	r0, [r4, #0]
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 8000674:	6822      	ldr	r2, [r4, #0]
 8000676:	f442 7140 	orr.w	r1, r2, #768	; 0x300
 800067a:	6021      	str	r1, [r4, #0]
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 800067c:	6823      	ldr	r3, [r4, #0]
 800067e:	f443 6000 	orr.w	r0, r3, #2048	; 0x800
 8000682:	6020      	str	r0, [r4, #0]
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 8000684:	6822      	ldr	r2, [r4, #0]
 8000686:	f422 4170 	bic.w	r1, r2, #61440	; 0xf000
 800068a:	6021      	str	r1, [r4, #0]
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 800068c:	6823      	ldr	r3, [r4, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 800068e:	210c      	movs	r1, #12
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 8000690:	6023      	str	r3, [r4, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 8000692:	6820      	ldr	r0, [r4, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <Hw_Uart_Open_COM2+0x88>)
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 8000696:	f440 4280 	orr.w	r2, r0, #16384	; 0x4000
 800069a:	6022      	str	r2, [r4, #0]
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 800069c:	4c11      	ldr	r4, [pc, #68]	; (80006e4 <Hw_Uart_Open_COM2+0x8c>)
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 800069e:	2200      	movs	r2, #0
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 80006a0:	f44f 709c 	mov.w	r0, #312	; 0x138
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 80006a4:	6021      	str	r1, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 80006a6:	601a      	str	r2, [r3, #0]
	REG_USART2_CR3  = 0;
 80006a8:	605a      	str	r2, [r3, #4]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 80006aa:	f843 0c08 	str.w	r0, [r3, #-8]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <Hw_Uart_Open_COM2+0x90>)
 80006b0:	6819      	ldr	r1, [r3, #0]
 80006b2:	f041 0040 	orr.w	r0, r1, #64	; 0x40
 80006b6:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 80006b8:	6823      	ldr	r3, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 80006ba:	2026      	movs	r0, #38	; 0x26
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 80006bc:	f043 0120 	orr.w	r1, r3, #32
 80006c0:	6021      	str	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <Hw_Uart_Open_COM2+0x94>)
 80006c4:	490a      	ldr	r1, [pc, #40]	; (80006f0 <Hw_Uart_Open_COM2+0x98>)
 80006c6:	4798      	blx	r3
	
	REG_USART2_CR1 |= ( 1 << 13 );	    // USART Enable
 80006c8:	6822      	ldr	r2, [r4, #0]
 80006ca:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
 80006ce:	6020      	str	r0, [r4, #0]
 80006d0:	bd10      	pop	{r4, pc}
 80006d2:	bf00      	nop
 80006d4:	2000034c 	.word	0x2000034c
 80006d8:	4002101c 	.word	0x4002101c
 80006dc:	40010800 	.word	0x40010800
 80006e0:	40004410 	.word	0x40004410
 80006e4:	4000440c 	.word	0x4000440c
 80006e8:	e000e104 	.word	0xe000e104
 80006ec:	08000841 	.word	0x08000841
 80006f0:	08000581 	.word	0x08000581

080006f4 <Hw_Uart_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 80006f4:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <Hw_Uart_Init+0x30>)
 80006f8:	4798      	blx	r3
 80006fa:	2000      	movs	r0, #0
     TITLE   : Hw_Uart_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <Hw_Uart_Init+0x34>)
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80006fe:	2400      	movs	r4, #0
     TITLE   : Hw_Uart_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
 8000700:	1881      	adds	r1, r0, r2
 8000702:	300c      	adds	r0, #12
	u32 i;
	
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
 8000704:	2848      	cmp	r0, #72	; 0x48
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000706:	604c      	str	r4, [r1, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000708:	608c      	str	r4, [r1, #8]
	u32 i;
	
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
 800070a:	d1f7      	bne.n	80006fc <Hw_Uart_Init+0x8>
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 800070c:	4621      	mov	r1, r4
 800070e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <Hw_Uart_Init+0x38>)
 8000714:	4798      	blx	r3
			break;
			
		case HW_UART_COM2:
			Hw_Uart_Open_COM2( BaudData, ISR_FuncPtr );
 8000716:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800071a:	4621      	mov	r1, r4
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <Hw_Uart_Init+0x3c>)
 800071e:	4790      	blx	r2
 8000720:	bd10      	pop	{r4, pc}
 8000722:	bf00      	nop
 8000724:	080009ad 	.word	0x080009ad
 8000728:	2000034c 	.word	0x2000034c
 800072c:	080005f1 	.word	0x080005f1
 8000730:	08000659 	.word	0x08000659

08000734 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000734:	b513      	push	{r0, r1, r4, lr}
	u8 Uart_GetData = 0;
 8000736:	2300      	movs	r3, #0

	if( Ch == HW_UART_VCOM )
 8000738:	2805      	cmp	r0, #5
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 800073a:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 800073c:	f88d 3007 	strb.w	r3, [sp, #7]

	if( Ch == HW_UART_VCOM )
 8000740:	d102      	bne.n	8000748 <Hw_Uart_Getch+0x14>
	{
		return Hw_VCom_Getch();
 8000742:	4808      	ldr	r0, [pc, #32]	; (8000764 <Hw_Uart_Getch+0x30>)
 8000744:	4780      	blx	r0
 8000746:	e00b      	b.n	8000760 <Hw_Uart_Getch+0x2c>
	}

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 8000748:	4620      	mov	r0, r4
 800074a:	4907      	ldr	r1, [pc, #28]	; (8000768 <Hw_Uart_Getch+0x34>)
 800074c:	4788      	blx	r1
 800074e:	2800      	cmp	r0, #0
 8000750:	d0fa      	beq.n	8000748 <Hw_Uart_Getch+0x14>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 8000752:	4620      	mov	r0, r4
 8000754:	f10d 0107 	add.w	r1, sp, #7
 8000758:	4a04      	ldr	r2, [pc, #16]	; (800076c <Hw_Uart_Getch+0x38>)
 800075a:	4790      	blx	r2

	return Uart_GetData;
 800075c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000760:	bd1c      	pop	{r2, r3, r4, pc}
 8000762:	bf00      	nop
 8000764:	08000b55 	.word	0x08000b55
 8000768:	080009f9 	.word	0x080009f9
 800076c:	08000a5d 	.word	0x08000a5d

08000770 <Hw_Uart_Putch>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
 8000770:	2801      	cmp	r0, #1
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
 8000772:	b508      	push	{r3, lr}
	switch( Ch )
 8000774:	d00a      	beq.n	800078c <Hw_Uart_Putch+0x1c>
 8000776:	d305      	bcc.n	8000784 <Hw_Uart_Putch+0x14>
 8000778:	2805      	cmp	r0, #5
 800077a:	d10e      	bne.n	800079a <Hw_Uart_Putch+0x2a>

		case HW_UART_COM5:
			break;		

		case HW_UART_VCOM:
			Hw_VCom_Putch( Uart_PutData );
 800077c:	4608      	mov	r0, r1
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <Hw_Uart_Putch+0x2c>)
 8000780:	4798      	blx	r3
			break;	
 8000782:	e00a      	b.n	800079a <Hw_Uart_Putch+0x2a>
 8000784:	4608      	mov	r0, r1
 8000786:	4906      	ldr	r1, [pc, #24]	; (80007a0 <Hw_Uart_Putch+0x30>)
 8000788:	4788      	blx	r1
 800078a:	bd08      	pop	{r3, pc}
		    while( !(REG_USART1_SR & 0x80) );
    		REG_USART1_DR = Uart_PutData;
			break;
			
		case HW_UART_COM2:
		    while( !(REG_USART2_SR & 0x80) );
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <Hw_Uart_Putch+0x34>)
 800078e:	6802      	ldr	r2, [r0, #0]
 8000790:	0612      	lsls	r2, r2, #24
 8000792:	d5fb      	bpl.n	800078c <Hw_Uart_Putch+0x1c>
    		REG_USART2_DR = Uart_PutData;
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <Hw_Uart_Putch+0x38>)
 8000796:	6019      	str	r1, [r3, #0]
			break;
 8000798:	bd08      	pop	{r3, pc}
 800079a:	bd08      	pop	{r3, pc}
 800079c:	08000b81 	.word	0x08000b81
 80007a0:	080005d9 	.word	0x080005d9
 80007a4:	40004400 	.word	0x40004400
 80007a8:	40004404 	.word	0x40004404

080007ac <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <Hw_PLL_Init+0x78>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	f422 107c 	bic.w	r0, r2, #4128768	; 0x3f0000
 80007b4:	f020 01f0 	bic.w	r1, r0, #240	; 0xf0
 80007b8:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	f442 10e8 	orr.w	r0, r2, #1900544	; 0x1d0000
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 80007c0:	4a19      	ldr	r2, [pc, #100]	; (8000828 <Hw_PLL_Init+0x7c>)
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 80007c2:	6018      	str	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 80007c4:	6811      	ldr	r1, [r2, #0]
 80007c6:	f041 7080 	orr.w	r0, r1, #16777216	; 0x1000000
 80007ca:	6010      	str	r0, [r2, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 80007cc:	6811      	ldr	r1, [r2, #0]
 80007ce:	0189      	lsls	r1, r1, #6
 80007d0:	d5fc      	bpl.n	80007cc <Hw_PLL_Init+0x20>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	f022 0003 	bic.w	r0, r2, #3
 80007d8:	6018      	str	r0, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 80007da:	6819      	ldr	r1, [r3, #0]
 80007dc:	f041 0202 	orr.w	r2, r1, #2
 80007e0:	601a      	str	r2, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 80007e2:	6818      	ldr	r0, [r3, #0]
 80007e4:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 80007e8:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	f422 60e0 	bic.w	r0, r2, #1792	; 0x700
 80007f0:	6018      	str	r0, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 80007f2:	6819      	ldr	r1, [r3, #0]
 80007f4:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 80007f8:	601a      	str	r2, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	f420 5160 	bic.w	r1, r0, #14336	; 0x3800
 8000800:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	601a      	str	r2, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <Hw_PLL_Init+0x78>)
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	f000 010c 	and.w	r1, r0, #12
 800080e:	2908      	cmp	r1, #8
 8000810:	d1f9      	bne.n	8000806 <Hw_PLL_Init+0x5a>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <Hw_PLL_Init+0x80>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
 800081a:	f040 011d 	orr.w	r1, r0, #29
 800081e:	6019      	str	r1, [r3, #0]
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40021004 	.word	0x40021004
 8000828:	40021000 	.word	0x40021000
 800082c:	40021018 	.word	0x40021018

08000830 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8000830:	4b01      	ldr	r3, [pc, #4]	; (8000838 <Hw_ISR_Init+0x8>)
 8000832:	4a02      	ldr	r2, [pc, #8]	; (800083c <Hw_ISR_Init+0xc>)
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	4770      	bx	lr
 8000838:	e000ed08 	.word	0xe000ed08
 800083c:	20000400 	.word	0x20000400

08000840 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8000840:	4b02      	ldr	r3, [pc, #8]	; (800084c <Hw_ISR_SetIRQFunc+0xc>)
 8000842:	3010      	adds	r0, #16
 8000844:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000400 	.word	0x20000400

08000850 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <Hw_ISR_SetIRQFuncByAddr+0xc>)
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8000852:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000854:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000400 	.word	0x20000400

08000860 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 8000860:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 8000862:	203c      	movs	r0, #60	; 0x3c
 8000864:	4902      	ldr	r1, [pc, #8]	; (8000870 <Hw_Timer_SetupISR+0x10>)
 8000866:	2200      	movs	r2, #0
 8000868:	4b02      	ldr	r3, [pc, #8]	; (8000874 <Hw_Timer_SetupISR+0x14>)
 800086a:	4798      	blx	r3
 800086c:	bd08      	pop	{r3, pc}
 800086e:	bf00      	nop
 8000870:	0800095d 	.word	0x0800095d
 8000874:	08000851 	.word	0x08000851

08000878 <Hw_Timer_Setup>:
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <Hw_Timer_Setup+0x30>)
 800087a:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <Hw_Timer_Setup+0x34>)
	
	REG_STK_VAL  = 0;	
 800087c:	2000      	movs	r0, #0
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800087e:	601a      	str	r2, [r3, #0]
	
	REG_STK_VAL  = 0;	
 8000880:	6058      	str	r0, [r3, #4]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000882:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8000886:	f041 0204 	orr.w	r2, r1, #4
 800088a:	f843 2c04 	str.w	r2, [r3, #-4]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 800088e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8000892:	f040 0102 	orr.w	r1, r0, #2
 8000896:	f843 1c04 	str.w	r1, [r3, #-4]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 800089a:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800089e:	f042 0001 	orr.w	r0, r2, #1
 80008a2:	f843 0c04 	str.w	r0, [r3, #-4]

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 80008a6:	4770      	bx	lr
 80008a8:	e000e014 	.word	0xe000e014
 80008ac:	0001193f 	.word	0x0001193f

080008b0 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 80008b0:	b508      	push	{r3, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <Hw_Timer_Init+0x38>)
 80008b4:	7818      	ldrb	r0, [r3, #0]
 80008b6:	2801      	cmp	r0, #1
 80008b8:	d014      	beq.n	80008e4 <Hw_Timer_Init+0x34>
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <Hw_Timer_Init+0x3c>)
     TITLE   : Hw_Timer_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
 80008bc:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80008c0:	2200      	movs	r2, #0
 80008c2:	f803 2c08 	strb.w	r2, [r3, #-8]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80008c6:	f823 2c06 	strh.w	r2, [r3, #-6]
		Timer_Tbl[i].Timer_Init = 0;
 80008ca:	f823 2c04 	strh.w	r2, [r3, #-4]
		Timer_Tbl[i].TmrFnct    = NULL;
 80008ce:	f843 2b10 	str.w	r2, [r3], #16
	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d1f4      	bne.n	80008c0 <Hw_Timer_Init+0x10>
		Timer_Tbl[i].Timer_Init = 0;
		Timer_Tbl[i].TmrFnct    = NULL;
	}	                   
	
	
	Hw_Timer_SetupISR();
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <Hw_Timer_Init+0x40>)
 80008d8:	4780      	blx	r0
	Hw_Timer_Setup();	
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <Hw_Timer_Init+0x44>)
 80008dc:	4798      	blx	r3

	Excute = 1;
 80008de:	4a02      	ldr	r2, [pc, #8]	; (80008e8 <Hw_Timer_Init+0x38>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	7011      	strb	r1, [r2, #0]
 80008e4:	bd08      	pop	{r3, pc}
 80008e6:	bf00      	nop
 80008e8:	200002a0 	.word	0x200002a0
 80008ec:	20000208 	.word	0x20000208
 80008f0:	08000861 	.word	0x08000861
 80008f4:	08000879 	.word	0x08000879

080008f8 <Hw_Timer_Tick>:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 80008f8:	b538      	push	{r3, r4, r5, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <Hw_Timer_Tick+0x58>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 80008fc:	4915      	ldr	r1, [pc, #84]	; (8000954 <Hw_Timer_Tick+0x5c>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	1c50      	adds	r0, r2, #1
 8000902:	6018      	str	r0, [r3, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000904:	880c      	ldrh	r4, [r1, #0]
 8000906:	b2a5      	uxth	r5, r4
 8000908:	b11d      	cbz	r5, 8000912 <Hw_Timer_Tick+0x1a>
 800090a:	880b      	ldrh	r3, [r1, #0]
 800090c:	1e5a      	subs	r2, r3, #1
 800090e:	b290      	uxth	r0, r2
 8000910:	8008      	strh	r0, [r1, #0]
 8000912:	4c11      	ldr	r4, [pc, #68]	; (8000958 <Hw_Timer_Tick+0x60>)
     WORK	:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
 8000914:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000918:	f814 1c08 	ldrb.w	r1, [r4, #-8]
 800091c:	2901      	cmp	r1, #1
 800091e:	d112      	bne.n	8000946 <Hw_Timer_Tick+0x4e>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000920:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 8000924:	1e5a      	subs	r2, r3, #1
 8000926:	b290      	uxth	r0, r2
 8000928:	f824 0c06 	strh.w	r0, [r4, #-6]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800092c:	b958      	cbnz	r0, 8000946 <Hw_Timer_Tick+0x4e>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800092e:	f814 1c07 	ldrb.w	r1, [r4, #-7]

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000932:	f834 3c04 	ldrh.w	r3, [r4, #-4]
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000936:	2901      	cmp	r1, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8000938:	bf08      	it	eq
 800093a:	f804 0c08 	strbeq.w	r0, [r4, #-8]

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800093e:	f824 3c06 	strh.w	r3, [r4, #-6]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000942:	6822      	ldr	r2, [r4, #0]
 8000944:	4790      	blx	r2
 8000946:	3410      	adds	r4, #16

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000948:	42ac      	cmp	r4, r5
 800094a:	d1e5      	bne.n	8000918 <Hw_Timer_Tick+0x20>
				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
			}
		}
	}
	
}
 800094c:	bd38      	pop	{r3, r4, r5, pc}
 800094e:	bf00      	nop
 8000950:	200002a4 	.word	0x200002a4
 8000954:	200002a8 	.word	0x200002a8
 8000958:	20000208 	.word	0x20000208

0800095c <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 800095c:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 800095e:	4b01      	ldr	r3, [pc, #4]	; (8000964 <Hw_Timer_ISR+0x8>)
 8000960:	4798      	blx	r3
 8000962:	bd08      	pop	{r3, pc}
 8000964:	080008f9 	.word	0x080008f9

08000968 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8000968:	b510      	push	{r4, lr}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 800096a:	4c05      	ldr	r4, [pc, #20]	; (8000980 <Hw_Timer_Set+0x18>)
 800096c:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8000970:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8000972:	9b02      	ldr	r3, [sp, #8]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8000974:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8000976:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 8000978:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 800097a:	8081      	strh	r1, [r0, #4]
 800097c:	bd10      	pop	{r4, pc}
 800097e:	bf00      	nop
 8000980:	20000200 	.word	0x20000200

08000984 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8000984:	2809      	cmp	r0, #9
 8000986:	d803      	bhi.n	8000990 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <Hw_Timer_Start+0x10>)
 800098a:	0100      	lsls	r0, r0, #4
 800098c:	2201      	movs	r2, #1
 800098e:	541a      	strb	r2, [r3, r0]
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000200 	.word	0x20000200

08000998 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <Hw_Timer_Delay_ms+0x10>)
 800099a:	8018      	strh	r0, [r3, #0]
	
	while( Tmr_Ctn );
 800099c:	881a      	ldrh	r2, [r3, #0]
 800099e:	b290      	uxth	r0, r2
 80009a0:	2800      	cmp	r0, #0
 80009a2:	d1fb      	bne.n	800099c <Hw_Timer_Delay_ms+0x4>
}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	200002a8 	.word	0x200002a8

080009ac <Hw_Uart_Q_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
 80009ac:	2300      	movs	r3, #0
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 80009ae:	4904      	ldr	r1, [pc, #16]	; (80009c0 <Hw_Uart_Q_Init+0x14>)
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <Hw_Uart_Q_Init+0x18>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	525a      	strh	r2, [r3, r1]
 80009b6:	521a      	strh	r2, [r3, r0]
 80009b8:	3302      	adds	r3, #2
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
 80009ba:	2b0e      	cmp	r3, #14
 80009bc:	d1f7      	bne.n	80009ae <Hw_Uart_Q_Init+0x2>
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
	}
}
 80009be:	4770      	bx	lr
 80009c0:	20000686 	.word	0x20000686
 80009c4:	20000694 	.word	0x20000694

080009c8 <HW_UART_Q_SIZE>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HW_UART_Q_SIZE+0x24>)
 80009ca:	4909      	ldr	r1, [pc, #36]	; (80009f0 <HW_UART_Q_SIZE+0x28>)
 80009cc:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 80009d0:	f931 0010 	ldrsh.w	r0, [r1, r0, lsl #1]
 80009d4:	1a13      	subs	r3, r2, r0
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <HW_UART_Q_SIZE+0x2c>)
 80009d8:	3320      	adds	r3, #32
 80009da:	4018      	ands	r0, r3
 80009dc:	2800      	cmp	r0, #0
 80009de:	da03      	bge.n	80009e8 <HW_UART_Q_SIZE+0x20>
 80009e0:	1e42      	subs	r2, r0, #1
 80009e2:	f062 011f 	orn	r1, r2, #31
 80009e6:	1c48      	adds	r0, r1, #1
}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000694 	.word	0x20000694
 80009f0:	20000686 	.word	0x20000686
 80009f4:	8000001f 	.word	0x8000001f

080009f8 <HW_UART_Q_VAILD>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
 80009f8:	b508      	push	{r3, lr}
	return HW_UART_Q_SIZE(Ch);
 80009fa:	4b01      	ldr	r3, [pc, #4]	; (8000a00 <HW_UART_Q_VAILD+0x8>)
 80009fc:	4798      	blx	r3
}
 80009fe:	bd08      	pop	{r3, pc}
 8000a00:	080009c9 	.word	0x080009c9

08000a04 <Hw_Uart_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8000a04:	b538      	push	{r3, r4, r5, lr}

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <Hw_Uart_Q_Push+0x48>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8000a08:	4604      	mov	r4, r0
 8000a0a:	460d      	mov	r5, r1

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000a0c:	4798      	blx	r3
 8000a0e:	281f      	cmp	r0, #31
 8000a10:	d01a      	beq.n	8000a48 <Hw_Uart_Q_Push+0x44>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000a12:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <Hw_Uart_Q_Push+0x4c>)
 8000a14:	2021      	movs	r0, #33	; 0x21
 8000a16:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8000a1a:	782d      	ldrb	r5, [r5, #0]
 8000a1c:	b219      	sxth	r1, r3
 8000a1e:	fb00 1104 	mla	r1, r0, r4, r1
 8000a22:	480c      	ldr	r0, [pc, #48]	; (8000a54 <Hw_Uart_Q_Push+0x50>)
 8000a24:	3301      	adds	r3, #1
 8000a26:	5445      	strb	r5, [r0, r1]
 8000a28:	b299      	uxth	r1, r3
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <Hw_Uart_Q_Push+0x54>)
 8000a2c:	b208      	sxth	r0, r1
 8000a2e:	4003      	ands	r3, r0
 8000a30:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000a32:	f822 1014 	strh.w	r1, [r2, r4, lsl #1]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000a36:	da03      	bge.n	8000a40 <Hw_Uart_Q_Push+0x3c>
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	f063 011f 	orn	r1, r3, #31
 8000a3e:	1c4b      	adds	r3, r1, #1
 8000a40:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]

	return TRUE;
 8000a44:	2001      	movs	r0, #1
 8000a46:	bd38      	pop	{r3, r4, r5, pc}
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000a48:	2000      	movs	r0, #0

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;

	return TRUE;
}
 8000a4a:	bd38      	pop	{r3, r4, r5, pc}
 8000a4c:	080009c9 	.word	0x080009c9
 8000a50:	20000694 	.word	0x20000694
 8000a54:	20000590 	.word	0x20000590
 8000a58:	8000001f 	.word	0x8000001f

08000a5c <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000a5c:	b538      	push	{r3, r4, r5, lr}
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <Hw_Uart_Q_Pop+0x44>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000a60:	4604      	mov	r4, r0
 8000a62:	460d      	mov	r5, r1
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000a64:	4798      	blx	r3
 8000a66:	b1c8      	cbz	r0, 8000a9c <Hw_Uart_Q_Pop+0x40>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <Hw_Uart_Q_Pop+0x48>)
 8000a6a:	2021      	movs	r0, #33	; 0x21
 8000a6c:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8000a70:	b219      	sxth	r1, r3
 8000a72:	fb00 1104 	mla	r1, r0, r4, r1
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <Hw_Uart_Q_Pop+0x4c>)
 8000a78:	3301      	adds	r3, #1
 8000a7a:	5c41      	ldrb	r1, [r0, r1]
 8000a7c:	b298      	uxth	r0, r3

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <Hw_Uart_Q_Pop+0x50>)
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000a80:	7029      	strb	r1, [r5, #0]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000a82:	b201      	sxth	r1, r0
 8000a84:	400b      	ands	r3, r1
 8000a86:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000a88:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000a8c:	da03      	bge.n	8000a96 <Hw_Uart_Q_Pop+0x3a>
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	f063 001f 	orn	r0, r3, #31
 8000a94:	1c43      	adds	r3, r0, #1
 8000a96:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]

    return TRUE;
 8000a9a:	2001      	movs	r0, #1
}
 8000a9c:	bd38      	pop	{r3, r4, r5, pc}
 8000a9e:	bf00      	nop
 8000aa0:	080009c9 	.word	0x080009c9
 8000aa4:	20000686 	.word	0x20000686
 8000aa8:	20000590 	.word	0x20000590
 8000aac:	8000001f 	.word	0x8000001f

08000ab0 <Hw_Led_Off>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
 8000ab0:	b920      	cbnz	r0, 8000abc <Hw_Led_Off+0xc>
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 9 );
 8000ab2:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <Hw_Led_Off+0x10>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	f442 7000 	orr.w	r0, r2, #512	; 0x200
 8000aba:	6018      	str	r0, [r3, #0]
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40010c0c 	.word	0x40010c0c

08000ac4 <Hw_Led_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Init( void )
{
 8000ac4:	b508      	push	{r3, lr}
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <Hw_Led_Init+0x3c>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	f022 60e0 	bic.w	r0, r2, #117440512	; 0x7000000
 8000ace:	6018      	str	r0, [r3, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 8000ad0:	6819      	ldr	r1, [r3, #0]
 8000ad2:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8000ad6:	601a      	str	r2, [r3, #0]
	
	
	PinNum = 9-8;
	REG_GPIOB_CRH &= ~(0x0F << (PinNum*4+0));	// Clear
 8000ad8:	f8d3 0c00 	ldr.w	r0, [r3, #3072]	; 0xc00
 8000adc:	f020 01f0 	bic.w	r1, r0, #240	; 0xf0
 8000ae0:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	REG_GPIOB_CRH |=  (0x03 << (PinNum*4+0));	// MODE, PB.9 Output mode, max speed 50Mhz
 8000ae4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8000ae8:	f042 0030 	orr.w	r0, r2, #48	; 0x30
 8000aec:	f8c3 0c00 	str.w	r0, [r3, #3072]	; 0xc00
	REG_GPIOB_CRH |=  (0x00 << (PinNum*4+2));	// CNF,  PB.9 General purpose output push-pul
 8000af0:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
	
	Hw_Led_Off(0);	
 8000af4:	2000      	movs	r0, #0
	
	
	PinNum = 9-8;
	REG_GPIOB_CRH &= ~(0x0F << (PinNum*4+0));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (PinNum*4+0));	// MODE, PB.9 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (PinNum*4+2));	// CNF,  PB.9 General purpose output push-pul
 8000af6:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	
	Hw_Led_Off(0);	
 8000afa:	4b02      	ldr	r3, [pc, #8]	; (8000b04 <Hw_Led_Init+0x40>)
 8000afc:	4798      	blx	r3
 8000afe:	bd08      	pop	{r3, pc}
 8000b00:	40010004 	.word	0x40010004
 8000b04:	08000ab1 	.word	0x08000ab1

08000b08 <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 8000b08:	b920      	cbnz	r0, 8000b14 <Hw_Led_Toggle+0xc>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 9 );
 8000b0a:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <Hw_Led_Toggle+0x10>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	f482 7000 	eor.w	r0, r2, #512	; 0x200
 8000b12:	6018      	str	r0, [r3, #0]
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40010c0c 	.word	0x40010c0c

08000b1c <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8000b1c:	b508      	push	{r3, lr}
	Hw_VCom_Q_Init();
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <Hw_VCom_Init+0x20>)
 8000b20:	4798      	blx	r3


	Hw_VCom_RxdFuncPtr = NULL;
 8000b22:	4807      	ldr	r0, [pc, #28]	; (8000b40 <Hw_VCom_Init+0x24>)
 8000b24:	2200      	movs	r2, #0


	//Disable_ISR();
	Set_System();
 8000b26:	4907      	ldr	r1, [pc, #28]	; (8000b44 <Hw_VCom_Init+0x28>)
void Hw_VCom_Init( void )
{
	Hw_VCom_Q_Init();


	Hw_VCom_RxdFuncPtr = NULL;
 8000b28:	6002      	str	r2, [r0, #0]


	//Disable_ISR();
	Set_System();
 8000b2a:	4788      	blx	r1

	Set_USBClock();
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <Hw_VCom_Init+0x2c>)
 8000b2e:	4798      	blx	r3
	USB_Interrupts_Config();
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <Hw_VCom_Init+0x30>)
 8000b32:	4790      	blx	r2
	USB_Init();	
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <Hw_VCom_Init+0x34>)
 8000b36:	4780      	blx	r0
 8000b38:	bd08      	pop	{r3, pc}
 8000b3a:	bf00      	nop
 8000b3c:	08000b8d 	.word	0x08000b8d
 8000b40:	200006a4 	.word	0x200006a4
 8000b44:	08001105 	.word	0x08001105
 8000b48:	08001121 	.word	0x08001121
 8000b4c:	08001139 	.word	0x08001139
 8000b50:	08001bc1 	.word	0x08001bc1

08000b54 <Hw_VCom_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_VCom_Getch( void )
{
 8000b54:	b507      	push	{r0, r1, r2, lr}
	u8 Uart_GetData = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_VCOM_Q_VAILD(0) > 0 ) break;
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	4906      	ldr	r1, [pc, #24]	; (8000b78 <Hw_VCom_Getch+0x24>)
 8000b60:	4788      	blx	r1
 8000b62:	2800      	cmp	r0, #0
 8000b64:	d0fa      	beq.n	8000b5c <Hw_VCom_Getch+0x8>
	}

	Hw_VCom_Q_Pop( 0, &Uart_GetData );
 8000b66:	2000      	movs	r0, #0
 8000b68:	f10d 0107 	add.w	r1, sp, #7
 8000b6c:	4a03      	ldr	r2, [pc, #12]	; (8000b7c <Hw_VCom_Getch+0x28>)
 8000b6e:	4790      	blx	r2

	return Uart_GetData;
}
 8000b70:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000b74:	bd0e      	pop	{r1, r2, r3, pc}
 8000b76:	bf00      	nop
 8000b78:	08000bd5 	.word	0x08000bd5
 8000b7c:	08000c3d 	.word	0x08000c3d

08000b80 <Hw_VCom_Putch>:
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_VCom_Putch( char Uart_PutData )
{
 8000b80:	b508      	push	{r3, lr}
	USB_Send_Data( Uart_PutData );
 8000b82:	4b01      	ldr	r3, [pc, #4]	; (8000b88 <Hw_VCom_Putch+0x8>)
 8000b84:	4798      	blx	r3
 8000b86:	bd08      	pop	{r3, pc}
 8000b88:	080012b1 	.word	0x080012b1

08000b8c <Hw_VCom_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_VCOM_Q_CH_MAX; i++ )
	{
		Hw_VCom_Q_Start[i] = Hw_VCom_Q_End[i] = 0;
 8000b8c:	4a02      	ldr	r2, [pc, #8]	; (8000b98 <Hw_VCom_Q_Init+0xc>)
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <Hw_VCom_Q_Init+0x10>)
 8000b90:	2300      	movs	r3, #0
 8000b92:	8013      	strh	r3, [r2, #0]
 8000b94:	8003      	strh	r3, [r0, #0]
 8000b96:	4770      	bx	lr
 8000b98:	20000aaa 	.word	0x20000aaa
 8000b9c:	20000aac 	.word	0x20000aac

08000ba0 <HW_VCOM_Q_SIZE>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HW_VCOM_Q_SIZE+0x28>)
 8000ba2:	490a      	ldr	r1, [pc, #40]	; (8000bcc <HW_VCOM_Q_SIZE+0x2c>)
 8000ba4:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8000ba8:	f931 0010 	ldrsh.w	r0, [r1, r0, lsl #1]
 8000bac:	1a13      	subs	r3, r2, r0
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <HW_VCOM_Q_SIZE+0x30>)
 8000bb0:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8000bb4:	4010      	ands	r0, r2
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	da05      	bge.n	8000bc6 <HW_VCOM_Q_SIZE+0x26>
 8000bba:	1e41      	subs	r1, r0, #1
 8000bbc:	ea6f 5081 	mvn.w	r0, r1, lsl #22
 8000bc0:	ea6f 5390 	mvn.w	r3, r0, lsr #22
 8000bc4:	1c58      	adds	r0, r3, #1
}
 8000bc6:	4770      	bx	lr
 8000bc8:	20000aac 	.word	0x20000aac
 8000bcc:	20000aaa 	.word	0x20000aaa
 8000bd0:	800003ff 	.word	0x800003ff

08000bd4 <HW_VCOM_Q_VAILD>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_VAILD( u8 Ch )
{
 8000bd4:	b508      	push	{r3, lr}
	return HW_VCOM_Q_SIZE(Ch);
 8000bd6:	4b01      	ldr	r3, [pc, #4]	; (8000bdc <HW_VCOM_Q_VAILD+0x8>)
 8000bd8:	4798      	blx	r3
}
 8000bda:	bd08      	pop	{r3, pc}
 8000bdc:	08000ba1 	.word	0x08000ba1

08000be0 <Hw_VCom_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{
 8000be0:	b538      	push	{r3, r4, r5, lr}

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <Hw_VCom_Q_Push+0x4c>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{
 8000be4:	460d      	mov	r5, r1
 8000be6:	4604      	mov	r4, r0

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;
 8000be8:	4798      	blx	r3
 8000bea:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000bee:	4288      	cmp	r0, r1
 8000bf0:	d019      	beq.n	8000c26 <Hw_VCom_Q_Push+0x46>

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <Hw_VCom_Q_Push+0x50>)
 8000bf4:	eb04 2084 	add.w	r0, r4, r4, lsl #10
 8000bf8:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8000bfc:	782d      	ldrb	r5, [r5, #0]
 8000bfe:	b219      	sxth	r1, r3
 8000c00:	1841      	adds	r1, r0, r1
 8000c02:	480c      	ldr	r0, [pc, #48]	; (8000c34 <Hw_VCom_Q_Push+0x54>)
 8000c04:	3301      	adds	r3, #1
 8000c06:	5445      	strb	r5, [r0, r1]
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <Hw_VCom_Q_Push+0x58>)
 8000c0a:	b219      	sxth	r1, r3
 8000c0c:	4008      	ands	r0, r1
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	da05      	bge.n	8000c1e <Hw_VCom_Q_Push+0x3e>
 8000c12:	3801      	subs	r0, #1
 8000c14:	ea6f 5380 	mvn.w	r3, r0, lsl #22
 8000c18:	ea6f 5193 	mvn.w	r1, r3, lsr #22
 8000c1c:	1c48      	adds	r0, r1, #1
 8000c1e:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]

	return TRUE;
 8000c22:	2001      	movs	r0, #1
 8000c24:	bd38      	pop	{r3, r4, r5, pc}
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;
 8000c26:	2000      	movs	r0, #0

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;

	return TRUE;
}
 8000c28:	bd38      	pop	{r3, r4, r5, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08000ba1 	.word	0x08000ba1
 8000c30:	20000aac 	.word	0x20000aac
 8000c34:	200006a8 	.word	0x200006a8
 8000c38:	800003ff 	.word	0x800003ff

08000c3c <Hw_VCom_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
 8000c3c:	b538      	push	{r3, r4, r5, lr}
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <Hw_VCom_Q_Pop+0x40>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
 8000c40:	4604      	mov	r4, r0
 8000c42:	460d      	mov	r5, r1
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;
 8000c44:	4798      	blx	r3
 8000c46:	b1c0      	cbz	r0, 8000c7a <Hw_VCom_Q_Pop+0x3e>

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <Hw_VCom_Q_Pop+0x44>)
 8000c4a:	eb04 2084 	add.w	r0, r4, r4, lsl #10
 8000c4e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8000c52:	b219      	sxth	r1, r3
 8000c54:	1841      	adds	r1, r0, r1
 8000c56:	480b      	ldr	r0, [pc, #44]	; (8000c84 <Hw_VCom_Q_Pop+0x48>)
 8000c58:	3301      	adds	r3, #1
 8000c5a:	5c41      	ldrb	r1, [r0, r1]

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8000c5c:	b218      	sxth	r0, r3
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8000c5e:	7029      	strb	r1, [r5, #0]

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8000c60:	4909      	ldr	r1, [pc, #36]	; (8000c88 <Hw_VCom_Q_Pop+0x4c>)
 8000c62:	4001      	ands	r1, r0
 8000c64:	2900      	cmp	r1, #0
 8000c66:	da05      	bge.n	8000c74 <Hw_VCom_Q_Pop+0x38>
 8000c68:	3901      	subs	r1, #1
 8000c6a:	ea6f 5381 	mvn.w	r3, r1, lsl #22
 8000c6e:	ea6f 5093 	mvn.w	r0, r3, lsr #22
 8000c72:	1c41      	adds	r1, r0, #1
 8000c74:	f822 1014 	strh.w	r1, [r2, r4, lsl #1]

    return TRUE;
 8000c78:	2001      	movs	r0, #1
}
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}
 8000c7c:	08000ba1 	.word	0x08000ba1
 8000c80:	20000aaa 	.word	0x20000aaa
 8000c84:	200006a8 	.word	0x200006a8
 8000c88:	800003ff 	.word	0x800003ff

08000c8c <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8000c8c:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8000c8e:	4913      	ldr	r1, [pc, #76]	; (8000cdc <EP1_IN_Callback+0x50>)
 8000c90:	780b      	ldrb	r3, [r1, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d121      	bne.n	8000cda <EP1_IN_Callback+0x4e>
  {
    if (USART_Rx_length == 0) 
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <EP1_IN_Callback+0x54>)
 8000c98:	6813      	ldr	r3, [r2, #0]
 8000c9a:	b90b      	cbnz	r3, 8000ca0 <EP1_IN_Callback+0x14>
    {
      USB_Tx_State = 0;
 8000c9c:	700b      	strb	r3, [r1, #0]
 8000c9e:	bd38      	pop	{r3, r4, r5, pc}
 8000ca0:	4c10      	ldr	r4, [pc, #64]	; (8000ce4 <EP1_IN_Callback+0x58>)
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8000ca2:	2b40      	cmp	r3, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8000ca4:	6820      	ldr	r0, [r4, #0]
 8000ca6:	b281      	uxth	r1, r0
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8000ca8:	d905      	bls.n	8000cb6 <EP1_IN_Callback+0x2a>
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8000caa:	3040      	adds	r0, #64	; 0x40
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8000cac:	3b40      	subs	r3, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8000cae:	6020      	str	r0, [r4, #0]
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8000cb0:	6013      	str	r3, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8000cb2:	2540      	movs	r5, #64	; 0x40
 8000cb4:	e004      	b.n	8000cc0 <EP1_IN_Callback+0x34>
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = USART_Rx_length;
 8000cb6:	b29d      	uxth	r5, r3
        
        USART_Rx_ptr_out += USART_Rx_length;
 8000cb8:	18c3      	adds	r3, r0, r3
        USART_Rx_length = 0;
 8000cba:	2000      	movs	r0, #0
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
 8000cbc:	6023      	str	r3, [r4, #0]
        USART_Rx_length = 0;
 8000cbe:	6010      	str	r0, [r2, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8000cc0:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <EP1_IN_Callback+0x5c>)
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <EP1_IN_Callback+0x60>)
 8000cc4:	1850      	adds	r0, r2, r1
 8000cc6:	21c0      	movs	r1, #192	; 0xc0
 8000cc8:	462a      	mov	r2, r5
 8000cca:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4629      	mov	r1, r5
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <EP1_IN_Callback+0x64>)
 8000cd2:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <EP1_IN_Callback+0x68>)
 8000cd8:	4788      	blx	r1
 8000cda:	bd38      	pop	{r3, r4, r5, pc}
 8000cdc:	200002b8 	.word	0x200002b8
 8000ce0:	200002c4 	.word	0x200002c4
 8000ce4:	200002c0 	.word	0x200002c0
 8000ce8:	20000af2 	.word	0x20000af2
 8000cec:	08001bf9 	.word	0x08001bf9
 8000cf0:	08001e0d 	.word	0x08001e0d
 8000cf4:	08001ce9 	.word	0x08001ce9

08000cf8 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8000cf8:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8000cfa:	4c06      	ldr	r4, [pc, #24]	; (8000d14 <EP3_OUT_Callback+0x1c>)
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <EP3_OUT_Callback+0x20>)
 8000cfe:	4621      	mov	r1, r4
 8000d00:	2003      	movs	r0, #3
 8000d02:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 8000d04:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <EP3_OUT_Callback+0x24>)
 8000d06:	b2c1      	uxtb	r1, r0
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4790      	blx	r2


  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	4904      	ldr	r1, [pc, #16]	; (8000d20 <EP3_OUT_Callback+0x28>)
 8000d10:	4788      	blx	r1
 8000d12:	bd10      	pop	{r4, pc}
 8000d14:	20000ab0 	.word	0x20000ab0
 8000d18:	08001eb1 	.word	0x08001eb1
 8000d1c:	080011e1 	.word	0x080011e1
 8000d20:	08001d0b 	.word	0x08001d0b

08000d24 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 8000d24:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <SOF_Callback+0x20>)
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	2805      	cmp	r0, #5
 8000d2c:	d109      	bne.n	8000d42 <SOF_Callback+0x1e>
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <SOF_Callback+0x24>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	1c51      	adds	r1, r2, #1
 8000d34:	2a05      	cmp	r2, #5
 8000d36:	6019      	str	r1, [r3, #0]
 8000d38:	d103      	bne.n	8000d42 <SOF_Callback+0x1e>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8000d3e:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <SOF_Callback+0x28>)
 8000d40:	4798      	blx	r3
 8000d42:	bd08      	pop	{r3, pc}
 8000d44:	200002b4 	.word	0x200002b4
 8000d48:	200002ac 	.word	0x200002ac
 8000d4c:	08001215 	.word	0x08001215

08000d50 <USB_Istr>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8000d50:	b538      	push	{r3, r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <USB_Istr+0x68>)
 8000d54:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <USB_Istr+0x6c>)
 8000d56:	6819      	ldr	r1, [r3, #0]

  //Lb_printf("%x %x %x %x  \r\n", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000d58:	4d19      	ldr	r5, [pc, #100]	; (8000dc0 <USB_Istr+0x70>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8000d5a:	b288      	uxth	r0, r1
 8000d5c:	8010      	strh	r0, [r2, #0]

  //Lb_printf("%x %x %x %x  \r\n", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000d5e:	8814      	ldrh	r4, [r2, #0]
 8000d60:	8829      	ldrh	r1, [r5, #0]
 8000d62:	4021      	ands	r1, r4
 8000d64:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8000d68:	b282      	uxth	r2, r0
 8000d6a:	b14a      	cbz	r2, 8000d80 <USB_Istr+0x30>
  {
	//Lb_printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8000d6c:	f64f 54ff 	movw	r4, #65023	; 0xfdff
 8000d70:	601c      	str	r4, [r3, #0]
    bIntPackSOF++;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <USB_Istr+0x74>)

#ifdef SOF_CALLBACK
    SOF_Callback();
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <USB_Istr+0x78>)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//Lb_printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8000d76:	781d      	ldrb	r5, [r3, #0]
 8000d78:	1c69      	adds	r1, r5, #1
 8000d7a:	b2c8      	uxtb	r0, r1
 8000d7c:	7018      	strb	r0, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8000d7e:	4790      	blx	r2
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8000d80:	4c0e      	ldr	r4, [pc, #56]	; (8000dbc <USB_Istr+0x6c>)
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <USB_Istr+0x70>)
 8000d84:	8825      	ldrh	r5, [r4, #0]
 8000d86:	8819      	ldrh	r1, [r3, #0]
 8000d88:	4029      	ands	r1, r5
 8000d8a:	f401 4000 	and.w	r0, r1, #32768	; 0x8000
 8000d8e:	b282      	uxth	r2, r0
 8000d90:	4625      	mov	r5, r4
 8000d92:	461c      	mov	r4, r3
 8000d94:	b10a      	cbz	r2, 8000d9a <USB_Istr+0x4a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <USB_Istr+0x7c>)
 8000d98:	4798      	blx	r3
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8000d9a:	8829      	ldrh	r1, [r5, #0]
 8000d9c:	8820      	ldrh	r0, [r4, #0]
 8000d9e:	4008      	ands	r0, r1
 8000da0:	f400 6280 	and.w	r2, r0, #1024	; 0x400
 8000da4:	b293      	uxth	r3, r2
 8000da6:	b133      	cbz	r3, 8000db6 <USB_Istr+0x66>
  {
  	//Lb_printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <USB_Istr+0x68>)
    Device_Property.Reset();
 8000daa:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <USB_Istr+0x80>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//Lb_printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8000dac:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 8000db0:	6001      	str	r1, [r0, #0]
    Device_Property.Reset();
 8000db2:	6853      	ldr	r3, [r2, #4]
 8000db4:	4798      	blx	r3
 8000db6:	bd38      	pop	{r3, r4, r5, pc}
 8000db8:	40005c44 	.word	0x40005c44
 8000dbc:	20000af0 	.word	0x20000af0
 8000dc0:	20001324 	.word	0x20001324
 8000dc4:	200002b0 	.word	0x200002b0
 8000dc8:	08000d25 	.word	0x08000d25
 8000dcc:	08001ee1 	.word	0x08001ee1
 8000dd0:	2000005c 	.word	0x2000005c

08000dd4 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <Virtual_Com_Port_SetConfiguration+0x10>)
 8000dd6:	7a98      	ldrb	r0, [r3, #10]
 8000dd8:	b110      	cbz	r0, 8000de0 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8000dda:	4903      	ldr	r1, [pc, #12]	; (8000de8 <Virtual_Com_Port_SetConfiguration+0x14>)
 8000ddc:	2205      	movs	r2, #5
 8000dde:	600a      	str	r2, [r1, #0]
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20001300 	.word	0x20001300
 8000de8:	200002b4 	.word	0x200002b4

08000dec <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8000dec:	4b01      	ldr	r3, [pc, #4]	; (8000df4 <Virtual_Com_Port_SetDeviceAddress+0x8>)
 8000dee:	2204      	movs	r2, #4
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	4770      	bx	lr
 8000df4:	200002b4 	.word	0x200002b4

08000df8 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <Virtual_Com_Port_Status_In+0x10>)
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	2a20      	cmp	r2, #32
 8000dfe:	d101      	bne.n	8000e04 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8000e00:	2000      	movs	r0, #0
 8000e02:	7018      	strb	r0, [r3, #0]
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200002b1 	.word	0x200002b1

08000e0c <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8000e0c:	4770      	bx	lr
	...

08000e10 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8000e10:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8000e12:	b510      	push	{r4, lr}
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8000e14:	d108      	bne.n	8000e28 <Virtual_Com_Port_Data_Setup+0x18>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000e16:	4811      	ldr	r0, [pc, #68]	; (8000e5c <Virtual_Com_Port_Data_Setup+0x4c>)
 8000e18:	6803      	ldr	r3, [r0, #0]
 8000e1a:	7819      	ldrb	r1, [r3, #0]
 8000e1c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8000e20:	2a21      	cmp	r2, #33	; 0x21
 8000e22:	d011      	beq.n	8000e48 <Virtual_Com_Port_Data_Setup+0x38>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8000e24:	2002      	movs	r0, #2
 8000e26:	bd10      	pop	{r4, pc}
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8000e28:	2820      	cmp	r0, #32
 8000e2a:	d1fb      	bne.n	8000e24 <Virtual_Com_Port_Data_Setup+0x14>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <Virtual_Com_Port_Data_Setup+0x4c>)
 8000e2e:	6819      	ldr	r1, [r3, #0]
 8000e30:	780a      	ldrb	r2, [r1, #0]
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 8000e32:	490b      	ldr	r1, [pc, #44]	; (8000e60 <Virtual_Com_Port_Data_Setup+0x50>)
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000e34:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <Virtual_Com_Port_Data_Setup+0x54>)
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 8000e3a:	2b21      	cmp	r3, #33	; 0x21
 8000e3c:	bf0c      	ite	eq
 8000e3e:	460b      	moveq	r3, r1
 8000e40:	2300      	movne	r3, #0
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8000e42:	7010      	strb	r0, [r2, #0]
  }

  if (CopyRoutine == NULL)
 8000e44:	b90b      	cbnz	r3, 8000e4a <Virtual_Com_Port_Data_Setup+0x3a>
 8000e46:	e7ed      	b.n	8000e24 <Virtual_Com_Port_Data_Setup+0x14>

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <Virtual_Com_Port_Data_Setup+0x58>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000e4a:	4c04      	ldr	r4, [pc, #16]	; (8000e5c <Virtual_Com_Port_Data_Setup+0x4c>)
 8000e4c:	6820      	ldr	r0, [r4, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000e4e:	2400      	movs	r4, #0
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000e50:	6183      	str	r3, [r0, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000e52:	8244      	strh	r4, [r0, #18]
  (*CopyRoutine)(0);
 8000e54:	4620      	mov	r0, r4
 8000e56:	4798      	blx	r3
  return USB_SUCCESS;
 8000e58:	4620      	mov	r0, r4
}
 8000e5a:	bd10      	pop	{r4, pc}
 8000e5c:	20001320 	.word	0x20001320
 8000e60:	08000eb9 	.word	0x08000eb9
 8000e64:	200002b1 	.word	0x200002b1
 8000e68:	08000ea1 	.word	0x08000ea1

08000e6c <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <Virtual_Com_Port_NoData_Setup+0x20>)
 8000e6e:	6819      	ldr	r1, [r3, #0]
 8000e70:	780a      	ldrb	r2, [r1, #0]
 8000e72:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8000e76:	2b21      	cmp	r3, #33	; 0x21
 8000e78:	d105      	bne.n	8000e86 <Virtual_Com_Port_NoData_Setup+0x1a>
  {
    if (RequestNo == SET_COMM_FEATURE)
 8000e7a:	2802      	cmp	r0, #2
 8000e7c:	d101      	bne.n	8000e82 <Virtual_Com_Port_NoData_Setup+0x16>
    {
      return USB_SUCCESS;
 8000e7e:	2000      	movs	r0, #0
 8000e80:	4770      	bx	lr
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 8000e82:	2822      	cmp	r0, #34	; 0x22
 8000e84:	d0fb      	beq.n	8000e7e <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8000e86:	2002      	movs	r0, #2
}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20001320 	.word	0x20001320

08000e90 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8000e90:	b109      	cbz	r1, 8000e96 <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 8000e92:	2002      	movs	r0, #2
 8000e94:	4770      	bx	lr
  }
  else if (Interface > 1)
 8000e96:	2801      	cmp	r0, #1
 8000e98:	d8fb      	bhi.n	8000e92 <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 8000e9a:	4608      	mov	r0, r1
}
 8000e9c:	4770      	bx	lr
	...

08000ea0 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8000ea0:	b920      	cbnz	r0, 8000eac <Virtual_Com_Port_GetLineCoding+0xc>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8000ea2:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <Virtual_Com_Port_GetLineCoding+0x10>)
 8000ea4:	2208      	movs	r2, #8
 8000ea6:	6819      	ldr	r1, [r3, #0]
 8000ea8:	820a      	strh	r2, [r1, #16]
    return NULL;
 8000eaa:	4770      	bx	lr
  }
  return(uint8_t *)&linecoding;
 8000eac:	4801      	ldr	r0, [pc, #4]	; (8000eb4 <Virtual_Com_Port_GetLineCoding+0x14>)
}
 8000eae:	4770      	bx	lr
 8000eb0:	20001320 	.word	0x20001320
 8000eb4:	200000d8 	.word	0x200000d8

08000eb8 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8000eb8:	b920      	cbnz	r0, 8000ec4 <Virtual_Com_Port_SetLineCoding+0xc>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8000eba:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <Virtual_Com_Port_SetLineCoding+0x10>)
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	820a      	strh	r2, [r1, #16]
    return NULL;
 8000ec2:	4770      	bx	lr
  }
  return(uint8_t *)&linecoding;
 8000ec4:	4801      	ldr	r0, [pc, #4]	; (8000ecc <Virtual_Com_Port_SetLineCoding+0x14>)
}
 8000ec6:	4770      	bx	lr
 8000ec8:	20001320 	.word	0x20001320
 8000ecc:	200000d8 	.word	0x200000d8

08000ed0 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8000ed0:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8000ed4:	6819      	ldr	r1, [r3, #0]
 8000ed6:	78ca      	ldrb	r2, [r1, #3]
  if (wValue0 > 4)
 8000ed8:	2a04      	cmp	r2, #4
 8000eda:	d805      	bhi.n	8000ee8 <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8000ede:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 8000ee4:	4790      	blx	r2
 8000ee6:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 8000ee8:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 8000eea:	bd08      	pop	{r3, pc}
 8000eec:	20001320 	.word	0x20001320
 8000ef0:	200000b8 	.word	0x200000b8
 8000ef4:	080016c5 	.word	0x080016c5

08000ef8 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8000ef8:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8000efa:	4902      	ldr	r1, [pc, #8]	; (8000f04 <Virtual_Com_Port_GetConfigDescriptor+0xc>)
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <Virtual_Com_Port_GetConfigDescriptor+0x10>)
 8000efe:	4798      	blx	r3
}
 8000f00:	bd08      	pop	{r3, pc}
 8000f02:	bf00      	nop
 8000f04:	20000054 	.word	0x20000054
 8000f08:	080016c5 	.word	0x080016c5

08000f0c <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8000f0c:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8000f0e:	4902      	ldr	r1, [pc, #8]	; (8000f18 <Virtual_Com_Port_GetDeviceDescriptor+0xc>)
 8000f10:	4b02      	ldr	r3, [pc, #8]	; (8000f1c <Virtual_Com_Port_GetDeviceDescriptor+0x10>)
 8000f12:	4798      	blx	r3
}
 8000f14:	bd08      	pop	{r3, pc}
 8000f16:	bf00      	nop
 8000f18:	200000b0 	.word	0x200000b0
 8000f1c:	080016c5 	.word	0x080016c5

08000f20 <Virtual_Com_Port_Reset>:
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000f20:	4a30      	ldr	r2, [pc, #192]	; (8000fe4 <Virtual_Com_Port_Reset+0xc4>)
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000f22:	4b31      	ldr	r3, [pc, #196]	; (8000fe8 <Virtual_Com_Port_Reset+0xc8>)

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000f24:	79d1      	ldrb	r1, [r2, #7]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000f26:	6818      	ldr	r0, [r3, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8000f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000f2c:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000f2e:	7241      	strb	r1, [r0, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000f30:	7284      	strb	r4, [r0, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8000f32:	72c4      	strb	r4, [r0, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8000f34:	4d2d      	ldr	r5, [pc, #180]	; (8000fec <Virtual_Com_Port_Reset+0xcc>)
 8000f36:	4620      	mov	r0, r4
 8000f38:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8000f3a:	4e2d      	ldr	r6, [pc, #180]	; (8000ff0 <Virtual_Com_Port_Reset+0xd0>)
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f42:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8000f44:	4d2b      	ldr	r5, [pc, #172]	; (8000ff4 <Virtual_Com_Port_Reset+0xd4>)
 8000f46:	2110      	movs	r1, #16
 8000f48:	4620      	mov	r0, r4
 8000f4a:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000f4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8001010 <Virtual_Com_Port_Reset+0xf0>
 8000f50:	2140      	movs	r1, #64	; 0x40
 8000f52:	4620      	mov	r0, r4
 8000f54:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8000f56:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8001014 <Virtual_Com_Port_Reset+0xf4>
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8000f60:	4f25      	ldr	r7, [pc, #148]	; (8000ff8 <Virtual_Com_Port_Reset+0xd8>)
 8000f62:	4620      	mov	r0, r4
 8000f64:	47b8      	blx	r7
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8000f66:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <Virtual_Com_Port_Reset+0xdc>)
 8000f68:	4620      	mov	r0, r4
 8000f6a:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8000f6e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001018 <Virtual_Com_Port_Reset+0xf8>
 8000f72:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 8000f74:	4a22      	ldr	r2, [pc, #136]	; (8001000 <Virtual_Com_Port_Reset+0xe0>)
 8000f76:	4620      	mov	r0, r4
 8000f78:	4790      	blx	r2

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	4621      	mov	r1, r4
 8000f7e:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8000f80:	2001      	movs	r0, #1
 8000f82:	21c0      	movs	r1, #192	; 0xc0
 8000f84:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8000f86:	2001      	movs	r0, #1
 8000f88:	2120      	movs	r1, #32
 8000f8a:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8000f8c:	4f1d      	ldr	r7, [pc, #116]	; (8001004 <Virtual_Com_Port_Reset+0xe4>)
 8000f8e:	2001      	movs	r0, #1
 8000f90:	4621      	mov	r1, r4
 8000f92:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8000f94:	2002      	movs	r0, #2
 8000f96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000f9a:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa2:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4621      	mov	r1, r4
 8000fa8:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8000faa:	2002      	movs	r0, #2
 8000fac:	2120      	movs	r1, #32
 8000fae:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000fbc:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	2140      	movs	r1, #64	; 0x40
 8000fc2:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000fca:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	4621      	mov	r1, r4
 8000fd0:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <Virtual_Com_Port_Reset+0xe8>)
 8000fd6:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <Virtual_Com_Port_Reset+0xec>)
 8000fda:	2001      	movs	r0, #1
 8000fdc:	6018      	str	r0, [r3, #0]
 8000fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe2:	bf00      	nop
 8000fe4:	08002206 	.word	0x08002206
 8000fe8:	20001320 	.word	0x20001320
 8000fec:	08001c4d 	.word	0x08001c4d
 8000ff0:	08001c5d 	.word	0x08001c5d
 8000ff4:	08001c75 	.word	0x08001c75
 8000ff8:	08001d2d 	.word	0x08001d2d
 8000ffc:	2000005c 	.word	0x2000005c
 8001000:	08001d0b 	.word	0x08001d0b
 8001004:	08001caf 	.word	0x08001caf
 8001008:	08001b15 	.word	0x08001b15
 800100c:	200002b4 	.word	0x200002b4
 8001010:	08001db5 	.word	0x08001db5
 8001014:	08001d95 	.word	0x08001d95
 8001018:	08001e29 	.word	0x08001e29

0800101c <Virtual_Com_Port_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 800101c:	b510      	push	{r4, lr}


  PowerOff();
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <Virtual_Com_Port_init+0x28>)
 8001020:	4798      	blx	r3
  
  Hw_Timer_Delay_ms(50);
 8001022:	4909      	ldr	r1, [pc, #36]	; (8001048 <Virtual_Com_Port_init+0x2c>)
 8001024:	2032      	movs	r0, #50	; 0x32
 8001026:	4788      	blx	r1


  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8001028:	4808      	ldr	r0, [pc, #32]	; (800104c <Virtual_Com_Port_init+0x30>)
 800102a:	4780      	blx	r0

  pInformation->Current_Configuration = 0;
 800102c:	4a08      	ldr	r2, [pc, #32]	; (8001050 <Virtual_Com_Port_init+0x34>)
 800102e:	2400      	movs	r4, #0
 8001030:	6813      	ldr	r3, [r2, #0]

  //Lb_printf("a");
  /* Connect the device */
  PowerOn();
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <Virtual_Com_Port_init+0x38>)

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8001034:	729c      	strb	r4, [r3, #10]

  //Lb_printf("a");
  /* Connect the device */
  PowerOn();
 8001036:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8001038:	4807      	ldr	r0, [pc, #28]	; (8001058 <Virtual_Com_Port_init+0x3c>)
 800103a:	4780      	blx	r0

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <Virtual_Com_Port_init+0x40>)
 800103e:	6014      	str	r4, [r2, #0]
 8001040:	bd10      	pop	{r4, pc}
 8001042:	bf00      	nop
 8001044:	08001095 	.word	0x08001095
 8001048:	08000999 	.word	0x08000999
 800104c:	080012e1 	.word	0x080012e1
 8001050:	20001320 	.word	0x20001320
 8001054:	08001061 	.word	0x08001061
 8001058:	08001e91 	.word	0x08001e91
 800105c:	200002b4 	.word	0x200002b4

08001060 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8001060:	b508      	push	{r3, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8001062:	2001      	movs	r0, #1
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <PowerOn+0x24>)
 8001066:	4798      	blx	r3

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <PowerOn+0x28>)

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <PowerOn+0x2c>)
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800106c:	2201      	movs	r2, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800106e:	2000      	movs	r0, #0
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001070:	601a      	str	r2, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8001072:	6018      	str	r0, [r3, #0]
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8001074:	6008      	str	r0, [r1, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8001076:	4906      	ldr	r1, [pc, #24]	; (8001090 <PowerOn+0x30>)
 8001078:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800107c:	800a      	strh	r2, [r1, #0]
  _SetCNTR(wInterrupt_Mask);
 800107e:	601a      	str	r2, [r3, #0]
  
  return USB_SUCCESS;
}
 8001080:	bd08      	pop	{r3, pc}
 8001082:	bf00      	nop
 8001084:	080011c9 	.word	0x080011c9
 8001088:	40005c40 	.word	0x40005c40
 800108c:	40005c44 	.word	0x40005c44
 8001090:	20001324 	.word	0x20001324

08001094 <PowerOff>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOff()
{
 8001094:	b538      	push	{r3, r4, r5, lr}
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
  /* clear interrupt status register */
  _SetISTR(0);
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <PowerOff+0x1c>)
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOff()
{
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
 8001098:	4d06      	ldr	r5, [pc, #24]	; (80010b4 <PowerOff+0x20>)
  /* clear interrupt status register */
  _SetISTR(0);
 800109a:	2400      	movs	r4, #0
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOff()
{
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
 800109c:	2301      	movs	r3, #1
 800109e:	602b      	str	r3, [r5, #0]
  /* clear interrupt status register */
  _SetISTR(0);
  /* Disable the Pull-Up*/
  USB_Cable_Config(DISABLE);
 80010a0:	4905      	ldr	r1, [pc, #20]	; (80010b8 <PowerOff+0x24>)
RESULT PowerOff()
{
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
  /* clear interrupt status register */
  _SetISTR(0);
 80010a2:	6004      	str	r4, [r0, #0]
  /* Disable the Pull-Up*/
  USB_Cable_Config(DISABLE);
 80010a4:	4620      	mov	r0, r4
 80010a6:	4788      	blx	r1
  /* switch-off device */
  _SetCNTR(CNTR_FRES + CNTR_PDWN);
 80010a8:	2203      	movs	r2, #3
 80010aa:	602a      	str	r2, [r5, #0]
  /* sw variables reset */
  /* ... */

  return USB_SUCCESS;
}
 80010ac:	4620      	mov	r0, r4
 80010ae:	bd38      	pop	{r3, r4, r5, pc}
 80010b0:	40005c44 	.word	0x40005c44
 80010b4:	40005c40 	.word	0x40005c40
 80010b8:	080011c9 	.word	0x080011c9

080010bc <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <USBWakeUp_IRQHandler+0xc>)
 80010be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40010414 	.word	0x40010414

080010cc <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 80010cc:	b510      	push	{r4, lr}
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80010ce:	3101      	adds	r1, #1
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d00e      	beq.n	80010f4 <IntToUnicode+0x28>
  {
    if( ((value >> 28)) < 0xA )
 80010d6:	0f04      	lsrs	r4, r0, #28
 80010d8:	2c09      	cmp	r4, #9
 80010da:	d801      	bhi.n	80010e0 <IntToUnicode+0x14>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80010dc:	3430      	adds	r4, #48	; 0x30
 80010de:	e000      	b.n	80010e2 <IntToUnicode+0x16>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80010e0:	3437      	adds	r4, #55	; 0x37
 80010e2:	f801 4c01 	strb.w	r4, [r1, #-1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80010e6:	3301      	adds	r3, #1
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80010e8:	2400      	movs	r4, #0
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80010ea:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 80010ec:	f801 4b02 	strb.w	r4, [r1], #2
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	e7ee      	b.n	80010d2 <IntToUnicode+0x6>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 80010f4:	bd10      	pop	{r4, pc}
	...

080010f8 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 80010f8:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 80010fa:	4b01      	ldr	r3, [pc, #4]	; (8001100 <USB_LP_IRQHandler+0x8>)
 80010fc:	4798      	blx	r3
 80010fe:	bd08      	pop	{r3, pc}
 8001100:	08000d51 	.word	0x08000d51

08001104 <Set_System>:
* Return         : None.
*******************************************************************************/
void Set_System(void)
{  	
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <Set_System+0x18>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	f422 0070 	bic.w	r0, r2, #15728640	; 0xf00000
 800110c:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	f441 1200 	orr.w	r2, r1, #2097152	; 0x200000
 8001114:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	6018      	str	r0, [r3, #0]
 800111a:	4770      	bx	lr
 800111c:	40011004 	.word	0x40011004

08001120 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <Set_USBClock+0x14>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	f422 0080 	bic.w	r0, r2, #4194304	; 0x400000
 8001128:	6018      	str	r0, [r3, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 800112a:	6999      	ldr	r1, [r3, #24]
 800112c:	f441 0200 	orr.w	r2, r1, #8388608	; 0x800000
 8001130:	619a      	str	r2, [r3, #24]
 8001132:	4770      	bx	lr
 8001134:	40021004 	.word	0x40021004

08001138 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <USB_Interrupts_Config+0x70>)
 800113a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 800113e:	b510      	push	{r4, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8001140:	601a      	str	r2, [r3, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8001142:	f853 0c14 	ldr.w	r0, [r3, #-20]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8001146:	4c19      	ldr	r4, [pc, #100]	; (80011ac <USB_Interrupts_Config+0x74>)

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8001148:	f420 2180 	bic.w	r1, r0, #262144	; 0x40000
 800114c:	f843 1c14 	str.w	r1, [r3, #-20]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8001150:	6822      	ldr	r2, [r4, #0]
 8001152:	f422 2080 	bic.w	r0, r2, #262144	; 0x40000
 8001156:	6020      	str	r0, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8001158:	6861      	ldr	r1, [r4, #4]
 800115a:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 800115e:	6062      	str	r2, [r4, #4]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8001160:	68a0      	ldr	r0, [r4, #8]
 8001162:	f420 2180 	bic.w	r1, r0, #262144	; 0x40000
 8001166:	60a1      	str	r1, [r4, #8]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8001168:	f853 4c14 	ldr.w	r4, [r3, #-20]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800116c:	2090      	movs	r0, #144	; 0x90
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 800116e:	f444 2280 	orr.w	r2, r4, #262144	; 0x40000
 8001172:	f843 2c14 	str.w	r2, [r3, #-20]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8001176:	490e      	ldr	r1, [pc, #56]	; (80011b0 <USB_Interrupts_Config+0x78>)
 8001178:	2200      	movs	r2, #0
 800117a:	4c0e      	ldr	r4, [pc, #56]	; (80011b4 <USB_Interrupts_Config+0x7c>)
 800117c:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <USB_Interrupts_Config+0x80>)
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8001180:	2200      	movs	r2, #0
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	f440 1180 	orr.w	r1, r0, #1048576	; 0x100000
 8001188:	6019      	str	r1, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 800118a:	20e8      	movs	r0, #232	; 0xe8
 800118c:	490b      	ldr	r1, [pc, #44]	; (80011bc <USB_Interrupts_Config+0x84>)
 800118e:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <USB_Interrupts_Config+0x88>)

	SET_BIT( REG_EXTI_SWIER, 18 );
 8001192:	490c      	ldr	r1, [pc, #48]	; (80011c4 <USB_Interrupts_Config+0x8c>)
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	f442 6080 	orr.w	r0, r2, #1024	; 0x400
 800119a:	6018      	str	r0, [r3, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 800119c:	680b      	ldr	r3, [r1, #0]
 800119e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011a2:	600a      	str	r2, [r1, #0]
 80011a4:	bd10      	pop	{r4, pc}
 80011a6:	bf00      	nop
 80011a8:	40010414 	.word	0x40010414
 80011ac:	40010404 	.word	0x40010404
 80011b0:	080010f9 	.word	0x080010f9
 80011b4:	08000851 	.word	0x08000851
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	080010bd 	.word	0x080010bd
 80011c0:	e000e104 	.word	0xe000e104
 80011c4:	40010410 	.word	0x40010410

080011c8 <USB_Cable_Config>:
* Description    : Software Connection/Disconnection of USB Cable
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <USB_Cable_Config+0x14>)
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 80011ca:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 80011cc:	b110      	cbz	r0, 80011d4 <USB_Cable_Config+0xc>
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 80011ce:	f422 5000 	bic.w	r0, r2, #8192	; 0x2000
 80011d2:	e001      	b.n	80011d8 <USB_Cable_Config+0x10>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 80011d4:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
 80011d8:	6018      	str	r0, [r3, #0]
 80011da:	4770      	bx	lr
 80011dc:	4001100c 	.word	0x4001100c

080011e0 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80011e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011e2:	4606      	mov	r6, r0
 80011e4:	460d      	mov	r5, r1
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80011e6:	2400      	movs	r4, #0
 80011e8:	42ac      	cmp	r4, r5
 80011ea:	d20e      	bcs.n	800120a <USB_To_USART_Send_Data+0x2a>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80011ec:	5d32      	ldrb	r2, [r6, r4]
 80011ee:	a902      	add	r1, sp, #8
 80011f0:	f801 2d01 	strb.w	r2, [r1, #-1]!
    Hw_VCom_Q_Push( 0, &UartData );	//
 80011f4:	2000      	movs	r0, #0
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <USB_To_USART_Send_Data+0x2c>)
 80011f8:	4798      	blx	r3

    if( Hw_VCom_RxdFuncPtr != NULL )
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <USB_To_USART_Send_Data+0x30>)
 80011fc:	6801      	ldr	r1, [r0, #0]
 80011fe:	b111      	cbz	r1, 8001206 <USB_To_USART_Send_Data+0x26>
    {
      Hw_VCom_RxdFuncPtr( UartData );      
 8001200:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001204:	4788      	blx	r1
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001206:	3401      	adds	r4, #1
 8001208:	e7ee      	b.n	80011e8 <USB_To_USART_Send_Data+0x8>
    if( Hw_VCom_RxdFuncPtr != NULL )
    {
      Hw_VCom_RxdFuncPtr( UartData );      
    }
  }  
}
 800120a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800120c:	08000be1 	.word	0x08000be1
 8001210:	200006a4 	.word	0x200006a4

08001214 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8001214:	b538      	push	{r3, r4, r5, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8001216:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <Handle_USBAsynchXfer+0x7c>)
 8001218:	7818      	ldrb	r0, [r3, #0]
 800121a:	2801      	cmp	r0, #1
 800121c:	d037      	beq.n	800128e <Handle_USBAsynchXfer+0x7a>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 800121e:	491d      	ldr	r1, [pc, #116]	; (8001294 <Handle_USBAsynchXfer+0x80>)
 8001220:	680a      	ldr	r2, [r1, #0]
 8001222:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001226:	d101      	bne.n	800122c <Handle_USBAsynchXfer+0x18>
    {
      USART_Rx_ptr_out = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	600b      	str	r3, [r1, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800122c:	481a      	ldr	r0, [pc, #104]	; (8001298 <Handle_USBAsynchXfer+0x84>)
 800122e:	680b      	ldr	r3, [r1, #0]
 8001230:	6801      	ldr	r1, [r0, #0]
 8001232:	428b      	cmp	r3, r1
 8001234:	d103      	bne.n	800123e <Handle_USBAsynchXfer+0x2a>
    {
      USB_Tx_State = 0; 
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <Handle_USBAsynchXfer+0x7c>)
 8001238:	2000      	movs	r0, #0
 800123a:	7018      	strb	r0, [r3, #0]
      return;
 800123c:	bd38      	pop	{r3, r4, r5, pc}
 800123e:	4c17      	ldr	r4, [pc, #92]	; (800129c <Handle_USBAsynchXfer+0x88>)
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8001240:	bf8c      	ite	hi
 8001242:	f5c3 6100 	rsbhi	r1, r3, #2048	; 0x800
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8001246:	ebc3 0101 	rsbls	r1, r3, r1
 800124a:	6021      	str	r1, [r4, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800124c:	6824      	ldr	r4, [r4, #0]
 800124e:	4913      	ldr	r1, [pc, #76]	; (800129c <Handle_USBAsynchXfer+0x88>)
 8001250:	2c40      	cmp	r4, #64	; 0x40
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <Handle_USBAsynchXfer+0x80>)
 8001254:	b298      	uxth	r0, r3
 8001256:	d905      	bls.n	8001264 <Handle_USBAsynchXfer+0x50>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8001258:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 800125a:	3c40      	subs	r4, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 800125c:	6013      	str	r3, [r2, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 800125e:	600c      	str	r4, [r1, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8001260:	2540      	movs	r5, #64	; 0x40
 8001262:	e004      	b.n	800126e <Handle_USBAsynchXfer+0x5a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 8001264:	18e3      	adds	r3, r4, r3
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 8001266:	b2a5      	uxth	r5, r4
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 8001268:	2400      	movs	r4, #0
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 800126a:	6013      	str	r3, [r2, #0]
      USART_Rx_length = 0;
 800126c:	600c      	str	r4, [r1, #0]
    }
    USB_Tx_State = 1; 
 800126e:	4908      	ldr	r1, [pc, #32]	; (8001290 <Handle_USBAsynchXfer+0x7c>)
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <Handle_USBAsynchXfer+0x8c>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8001272:	2401      	movs	r4, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001274:	1810      	adds	r0, r2, r0
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8001276:	700c      	strb	r4, [r1, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001278:	462a      	mov	r2, r5
 800127a:	21c0      	movs	r1, #192	; 0xc0
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <Handle_USBAsynchXfer+0x90>)
 800127e:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 8001280:	4620      	mov	r0, r4
 8001282:	4629      	mov	r1, r5
 8001284:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <Handle_USBAsynchXfer+0x94>)
 8001286:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 8001288:	4620      	mov	r0, r4
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <Handle_USBAsynchXfer+0x98>)
 800128c:	4788      	blx	r1
 800128e:	bd38      	pop	{r3, r4, r5, pc}
 8001290:	200002b8 	.word	0x200002b8
 8001294:	200002c0 	.word	0x200002c0
 8001298:	200002bc 	.word	0x200002bc
 800129c:	200002c4 	.word	0x200002c4
 80012a0:	20000af2 	.word	0x20000af2
 80012a4:	08001bf9 	.word	0x08001bf9
 80012a8:	08001e0d 	.word	0x08001e0d
 80012ac:	08001ce9 	.word	0x08001ce9

080012b0 <USB_Send_Data>:
	
	//-- 전송 버퍼가 꽉 차면 기다린다.
	//
	while(1)
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <USB_Send_Data+0x24>)
 80012b2:	6819      	ldr	r1, [r3, #0]
 80012b4:	1c4a      	adds	r2, r1, #1
 80012b6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80012ba:	d20a      	bcs.n	80012d2 <USB_Send_Data+0x22>
	}
	
	
	USART_Rx_Buffer[USART_Rx_ptr_in] = SendData;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <USB_Send_Data+0x28>)
 80012be:	4907      	ldr	r1, [pc, #28]	; (80012dc <USB_Send_Data+0x2c>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	5488      	strb	r0, [r1, r2]
	USART_Rx_ptr_in++;
 80012c4:	1c50      	adds	r0, r2, #1
  
	/* To avoid buffer overflow */
	if(USART_Rx_ptr_in == USART_RX_DATA_SIZE)
 80012c6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
	{
		USART_Rx_ptr_in = 0;
 80012ca:	bf08      	it	eq
 80012cc:	2000      	moveq	r0, #0
 80012ce:	6018      	str	r0, [r3, #0]
 80012d0:	4770      	bx	lr
 80012d2:	e7fe      	b.n	80012d2 <USB_Send_Data+0x22>
 80012d4:	200002c4 	.word	0x200002c4
 80012d8:	200002bc 	.word	0x200002bc
 80012dc:	20000af2 	.word	0x20000af2

080012e0 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 80012e0:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <Get_SerialNum+0x24>)
  Device_Serial1 = *(uint32_t*)ID2;
 80012e4:	e893 0024 	ldmia.w	r3, {r2, r5}
  Device_Serial2 = *(uint32_t*)ID3;  
 80012e8:	3308      	adds	r3, #8

  Device_Serial0 += Device_Serial2;
 80012ea:	6818      	ldr	r0, [r3, #0]

  if (Device_Serial0 != 0)
 80012ec:	1810      	adds	r0, r2, r0
 80012ee:	d007      	beq.n	8001300 <Get_SerialNum+0x20>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 80012f0:	4905      	ldr	r1, [pc, #20]	; (8001308 <Get_SerialNum+0x28>)
 80012f2:	2208      	movs	r2, #8
 80012f4:	4c05      	ldr	r4, [pc, #20]	; (800130c <Get_SerialNum+0x2c>)
 80012f6:	47a0      	blx	r4
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 80012f8:	4628      	mov	r0, r5
 80012fa:	4905      	ldr	r1, [pc, #20]	; (8001310 <Get_SerialNum+0x30>)
 80012fc:	2204      	movs	r2, #4
 80012fe:	47a0      	blx	r4
 8001300:	bd38      	pop	{r3, r4, r5, pc}
 8001302:	bf00      	nop
 8001304:	1ffff7e8 	.word	0x1ffff7e8
 8001308:	20000002 	.word	0x20000002
 800130c:	080010cd 	.word	0x080010cd
 8001310:	20000012 	.word	0x20000012

08001314 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8001314:	b510      	push	{r4, lr}
 8001316:	4c06      	ldr	r4, [pc, #24]	; (8001330 <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 8001318:	b918      	cbnz	r0, 8001322 <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	2201      	movs	r2, #1
 800131e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8001320:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <Standard_GetConfiguration+0x20>)
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	6801      	ldr	r1, [r0, #0]
 8001328:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_Configuration;
 800132a:	6820      	ldr	r0, [r4, #0]
 800132c:	300a      	adds	r0, #10
}
 800132e:	bd10      	pop	{r4, pc}
 8001330:	20001320 	.word	0x20001320
 8001334:	2000131c 	.word	0x2000131c

08001338 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8001338:	b510      	push	{r4, lr}
 800133a:	4c06      	ldr	r4, [pc, #24]	; (8001354 <Standard_GetInterface+0x1c>)
  if (Length == 0)
 800133c:	b918      	cbnz	r0, 8001346 <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	2201      	movs	r2, #1
 8001342:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8001344:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <Standard_GetInterface+0x20>)
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	6881      	ldr	r1, [r0, #8]
 800134c:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 800134e:	6820      	ldr	r0, [r4, #0]
 8001350:	300c      	adds	r0, #12
}
 8001352:	bd10      	pop	{r4, pc}
 8001354:	20001320 	.word	0x20001320
 8001358:	2000131c 	.word	0x2000131c

0800135c <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 800135c:	b508      	push	{r3, lr}
 800135e:	4a23      	ldr	r2, [pc, #140]	; (80013ec <Standard_GetStatus+0x90>)
  if (Length == 0)
 8001360:	b918      	cbnz	r0, 800136a <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8001362:	6813      	ldr	r3, [r2, #0]
 8001364:	2202      	movs	r2, #2
 8001366:	821a      	strh	r2, [r3, #16]
    return 0;
 8001368:	bd08      	pop	{r3, pc}
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <Standard_GetStatus+0x94>)
 800136c:	2000      	movs	r0, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800136e:	6812      	ldr	r2, [r2, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8001370:	8018      	strh	r0, [r3, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001372:	7811      	ldrb	r1, [r2, #0]
 8001374:	f011 017f 	ands.w	r1, r1, #127	; 0x7f
 8001378:	d113      	bne.n	80013a2 <Standard_GetStatus+0x46>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 800137a:	7a50      	ldrb	r0, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800137c:	f000 0220 	and.w	r2, r0, #32
 8001380:	b2d1      	uxtb	r1, r2
 8001382:	b109      	cbz	r1, 8001388 <Standard_GetStatus+0x2c>
    {
      SetBit(StatusInfo0, 1);
 8001384:	2202      	movs	r2, #2
 8001386:	701a      	strb	r2, [r3, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8001388:	f000 0340 	and.w	r3, r0, #64	; 0x40
 800138c:	b2d8      	uxtb	r0, r3
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <Standard_GetStatus+0x94>)
 8001390:	b118      	cbz	r0, 800139a <Standard_GetStatus+0x3e>
    {
      SetBit(StatusInfo0, 0);
 8001392:	781a      	ldrb	r2, [r3, #0]
 8001394:	f042 0101 	orr.w	r1, r2, #1
 8001398:	e01e      	b.n	80013d8 <Standard_GetStatus+0x7c>
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 800139a:	7819      	ldrb	r1, [r3, #0]
 800139c:	f021 0101 	bic.w	r1, r1, #1
 80013a0:	e01a      	b.n	80013d8 <Standard_GetStatus+0x7c>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80013a2:	2901      	cmp	r1, #1
 80013a4:	d01f      	beq.n	80013e6 <Standard_GetStatus+0x8a>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80013a6:	2902      	cmp	r1, #2
 80013a8:	d11e      	bne.n	80013e8 <Standard_GetStatus+0x8c>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 80013aa:	7950      	ldrb	r0, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 80013ac:	f000 020f 	and.w	r2, r0, #15
 80013b0:	ea4f 0182 	mov.w	r1, r2, lsl #2
    if (ValBit(wIndex0, 7))
 80013b4:	f010 0f80 	tst.w	r0, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80013b8:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
 80013bc:	f500 42b8 	add.w	r2, r0, #23552	; 0x5c00
 80013c0:	6811      	ldr	r1, [r2, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80013c2:	d003      	beq.n	80013cc <Standard_GetStatus+0x70>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80013c4:	f001 0230 	and.w	r2, r1, #48	; 0x30
 80013c8:	2a10      	cmp	r2, #16
 80013ca:	e003      	b.n	80013d4 <Standard_GetStatus+0x78>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80013cc:	f401 5040 	and.w	r0, r1, #12288	; 0x3000
 80013d0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80013d4:	d101      	bne.n	80013da <Standard_GetStatus+0x7e>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 80013d6:	2101      	movs	r1, #1
 80013d8:	7019      	strb	r1, [r3, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <Standard_GetStatus+0x98>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	6901      	ldr	r1, [r0, #16]
 80013e0:	4788      	blx	r1
  return (uint8_t *)&StatusInfo;
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <Standard_GetStatus+0x94>)
 80013e4:	bd08      	pop	{r3, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (uint8_t *)&StatusInfo;
 80013e6:	4618      	mov	r0, r3
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 80013e8:	bd08      	pop	{r3, pc}
 80013ea:	bf00      	nop
 80013ec:	20001320 	.word	0x20001320
 80013f0:	200012f2 	.word	0x200012f2
 80013f4:	2000131c 	.word	0x2000131c

080013f8 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80013f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <DataStageIn+0x8c>)
 80013fc:	681c      	ldr	r4, [r3, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 80013fe:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 8001400:	7a26      	ldrb	r6, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8001402:	b9ab      	cbnz	r3, 8001430 <DataStageIn+0x38>
 8001404:	2e04      	cmp	r6, #4
 8001406:	d113      	bne.n	8001430 <DataStageIn+0x38>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8001408:	481f      	ldr	r0, [pc, #124]	; (8001488 <DataStageIn+0x90>)
 800140a:	4920      	ldr	r1, [pc, #128]	; (800148c <DataStageIn+0x94>)
 800140c:	7802      	ldrb	r2, [r0, #0]
 800140e:	2a01      	cmp	r2, #1
 8001410:	d10a      	bne.n	8001428 <DataStageIn+0x30>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001412:	4c1f      	ldr	r4, [pc, #124]	; (8001490 <DataStageIn+0x98>)
 8001414:	6822      	ldr	r2, [r4, #0]
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001416:	b294      	uxth	r4, r2
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001418:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <DataStageIn+0x9c>)
 800141a:	18a2      	adds	r2, r4, r2
 800141c:	0052      	lsls	r2, r2, #1
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	2230      	movs	r2, #48	; 0x30
 8001422:	800a      	strh	r2, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8001424:	7003      	strb	r3, [r0, #0]
 8001426:	e028      	b.n	800147a <DataStageIn+0x82>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8001428:	2610      	movs	r6, #16
 800142a:	800e      	strh	r6, [r1, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 800142c:	2607      	movs	r6, #7
 800142e:	e024      	b.n	800147a <DataStageIn+0x82>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8001430:	8aa5      	ldrh	r5, [r4, #20]
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8001432:	69a1      	ldr	r1, [r4, #24]
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8001434:	42ab      	cmp	r3, r5
 8001436:	bf8c      	ite	hi
 8001438:	2602      	movhi	r6, #2
 800143a:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800143c:	429d      	cmp	r5, r3
 800143e:	bf28      	it	cs
 8001440:	461d      	movcs	r5, r3
 8001442:	4628      	mov	r0, r5
 8001444:	4788      	blx	r1
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <DataStageIn+0xa0>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8001448:	4607      	mov	r7, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800144a:	2000      	movs	r0, #0
 800144c:	4790      	blx	r2
 800144e:	462a      	mov	r2, r5
 8001450:	4601      	mov	r1, r0
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <DataStageIn+0xa4>)
 8001454:	4638      	mov	r0, r7
 8001456:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 8001458:	4629      	mov	r1, r5
 800145a:	2000      	movs	r0, #0
 800145c:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <DataStageIn+0xa8>)
 800145e:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 8001460:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8001462:	8a63      	ldrh	r3, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8001464:	1b41      	subs	r1, r0, r5
  pEPinfo->Usb_wOffset += Length;
 8001466:	18ed      	adds	r5, r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 8001468:	4808      	ldr	r0, [pc, #32]	; (800148c <DataStageIn+0x94>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <DataStageIn+0xac>)
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800146c:	8221      	strh	r1, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 800146e:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001470:	f44f 5140 	mov.w	r1, #12288	; 0x3000

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8001474:	8002      	strh	r2, [r0, #0]
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8001476:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001478:	8019      	strh	r1, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800147a:	4b02      	ldr	r3, [pc, #8]	; (8001484 <DataStageIn+0x8c>)
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	7206      	strb	r6, [r0, #8]
 8001480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001482:	bf00      	nop
 8001484:	20001320 	.word	0x20001320
 8001488:	200002c8 	.word	0x200002c8
 800148c:	20001328 	.word	0x20001328
 8001490:	40005c50 	.word	0x40005c50
 8001494:	20003002 	.word	0x20003002
 8001498:	08001dd5 	.word	0x08001dd5
 800149c:	08001bf9 	.word	0x08001bf9
 80014a0:	08001e0d 	.word	0x08001e0d
 80014a4:	20001326 	.word	0x20001326

080014a8 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 80014a8:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80014ac:	490a      	ldr	r1, [pc, #40]	; (80014d8 <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	784b      	ldrb	r3, [r1, #1]
 80014b2:	78c2      	ldrb	r2, [r0, #3]
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d30a      	bcc.n	80014ce <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80014b8:	7881      	ldrb	r1, [r0, #2]
 80014ba:	b941      	cbnz	r1, 80014ce <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 80014bc:	8884      	ldrh	r4, [r0, #4]
 80014be:	b934      	cbnz	r4, 80014ce <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 80014c0:	7282      	strb	r2, [r0, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <Standard_SetConfiguration+0x34>)
 80014c4:	6802      	ldr	r2, [r0, #0]
 80014c6:	6853      	ldr	r3, [r2, #4]
 80014c8:	4798      	blx	r3
    return USB_SUCCESS;
 80014ca:	4620      	mov	r0, r4
 80014cc:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 80014ce:	2002      	movs	r0, #2
  }
}
 80014d0:	bd10      	pop	{r4, pc}
 80014d2:	bf00      	nop
 80014d4:	20001320 	.word	0x20001320
 80014d8:	200000e0 	.word	0x200000e0
 80014dc:	2000131c 	.word	0x2000131c

080014e0 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 80014e0:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 80014e2:	4a0e      	ldr	r2, [pc, #56]	; (800151c <Standard_SetInterface+0x3c>)
 80014e4:	4c0e      	ldr	r4, [pc, #56]	; (8001520 <Standard_SetInterface+0x40>)
 80014e6:	6810      	ldr	r0, [r2, #0]
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	6982      	ldr	r2, [r0, #24]
 80014ec:	78d9      	ldrb	r1, [r3, #3]
 80014ee:	7958      	ldrb	r0, [r3, #5]
 80014f0:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 80014f2:	6821      	ldr	r1, [r4, #0]
 80014f4:	7a8b      	ldrb	r3, [r1, #10]
 80014f6:	b17b      	cbz	r3, 8001518 <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 80014f8:	b970      	cbnz	r0, 8001518 <Standard_SetInterface+0x38>
 80014fa:	7908      	ldrb	r0, [r1, #4]
 80014fc:	b960      	cbnz	r0, 8001518 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 80014fe:	788d      	ldrb	r5, [r1, #2]
 8001500:	b955      	cbnz	r5, 8001518 <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <Standard_SetInterface+0x44>)
 8001504:	6811      	ldr	r1, [r2, #0]
 8001506:	68cb      	ldr	r3, [r1, #12]
 8001508:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800150a:	6820      	ldr	r0, [r4, #0]
 800150c:	7942      	ldrb	r2, [r0, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800150e:	78c1      	ldrb	r1, [r0, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8001510:	72c2      	strb	r2, [r0, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8001512:	7301      	strb	r1, [r0, #12]
      return USB_SUCCESS;
 8001514:	4628      	mov	r0, r5
 8001516:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 8001518:	2002      	movs	r0, #2
}
 800151a:	bd38      	pop	{r3, r4, r5, pc}
 800151c:	200012f8 	.word	0x200012f8
 8001520:	20001320 	.word	0x20001320
 8001524:	2000131c 	.word	0x2000131c

08001528 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8001528:	b510      	push	{r4, lr}
  uint32_t     Type_Rec = Type_Recipient;
 800152a:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <Standard_ClearFeature+0xcc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001530:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8001534:	d104      	bne.n	8001540 <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8001536:	7a59      	ldrb	r1, [r3, #9]
 8001538:	f021 0220 	bic.w	r2, r1, #32
 800153c:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800153e:	bd10      	pop	{r4, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001540:	2802      	cmp	r0, #2
 8001542:	d155      	bne.n	80015f0 <Standard_ClearFeature+0xc8>
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8001544:	885a      	ldrh	r2, [r3, #2]
 8001546:	2a00      	cmp	r2, #0
 8001548:	d153      	bne.n	80015f2 <Standard_ClearFeature+0xca>
        || (pInformation->USBwIndex1 != 0))
 800154a:	7919      	ldrb	r1, [r3, #4]
 800154c:	2900      	cmp	r1, #0
 800154e:	d150      	bne.n	80015f2 <Standard_ClearFeature+0xca>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8001550:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 8001552:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 8001556:	ea4f 0480 	mov.w	r4, r0, lsl #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800155a:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 800155e:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 8001562:	6821      	ldr	r1, [r4, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001564:	4c24      	ldr	r4, [pc, #144]	; (80015f8 <Standard_ClearFeature+0xd0>)
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8001566:	f012 0f80 	tst.w	r2, #128	; 0x80
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800156a:	7824      	ldrb	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800156c:	bf14      	ite	ne
 800156e:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8001572:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001576:	42a0      	cmp	r0, r4
 8001578:	d23a      	bcs.n	80015f0 <Standard_ClearFeature+0xc8>
 800157a:	2900      	cmp	r1, #0
 800157c:	d038      	beq.n	80015f0 <Standard_ClearFeature+0xc8>
        || (pInformation->Current_Configuration == 0))
 800157e:	7a9b      	ldrb	r3, [r3, #10]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d035      	beq.n	80015f0 <Standard_ClearFeature+0xc8>
 8001584:	0084      	lsls	r4, r0, #2
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001586:	f002 0280 	and.w	r2, r2, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800158a:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 800158e:	b2d1      	uxtb	r1, r2
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001590:	f503 44b8 	add.w	r4, r3, #23552	; 0x5c00
 8001594:	6822      	ldr	r2, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001596:	b161      	cbz	r1, 80015b2 <Standard_ClearFeature+0x8a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001598:	f002 0130 	and.w	r1, r2, #48	; 0x30
 800159c:	2910      	cmp	r1, #16
 800159e:	d121      	bne.n	80015e4 <Standard_ClearFeature+0xbc>
      {
        ClearDTOG_TX(Related_Endpoint);
 80015a0:	b2c4      	uxtb	r4, r0
 80015a2:	4620      	mov	r0, r4
 80015a4:	4a15      	ldr	r2, [pc, #84]	; (80015fc <Standard_ClearFeature+0xd4>)
 80015a6:	4790      	blx	r2
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 80015a8:	4620      	mov	r0, r4
 80015aa:	2130      	movs	r1, #48	; 0x30
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <Standard_ClearFeature+0xd8>)
 80015ae:	4798      	blx	r3
 80015b0:	e018      	b.n	80015e4 <Standard_ClearFeature+0xbc>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80015b2:	f402 5140 	and.w	r1, r2, #12288	; 0x3000
 80015b6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80015ba:	d113      	bne.n	80015e4 <Standard_ClearFeature+0xbc>
      {
        if (Related_Endpoint == ENDP0)
 80015bc:	b928      	cbnz	r0, 80015ca <Standard_ClearFeature+0xa2>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 80015be:	4a11      	ldr	r2, [pc, #68]	; (8001604 <Standard_ClearFeature+0xdc>)
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <Standard_ClearFeature+0xe0>)
 80015c2:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 80015c6:	4798      	blx	r3
 80015c8:	e001      	b.n	80015ce <Standard_ClearFeature+0xa6>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <Standard_ClearFeature+0xe4>)
 80015cc:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 80015ce:	6820      	ldr	r0, [r4, #0]
 80015d0:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 80015d4:	4001      	ands	r1, r0
 80015d6:	f481 5240 	eor.w	r2, r1, #12288	; 0x3000
 80015da:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80015de:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 80015e2:	6020      	str	r0, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 80015e4:	480a      	ldr	r0, [pc, #40]	; (8001610 <Standard_ClearFeature+0xe8>)
 80015e6:	6801      	ldr	r1, [r0, #0]
 80015e8:	694a      	ldr	r2, [r1, #20]
 80015ea:	4790      	blx	r2
    return USB_SUCCESS;
 80015ec:	2000      	movs	r0, #0
 80015ee:	bd10      	pop	{r4, pc}
  }

  return USB_UNSUPPORT;
 80015f0:	2002      	movs	r0, #2
}
 80015f2:	bd10      	pop	{r4, pc}
 80015f4:	20001320 	.word	0x20001320
 80015f8:	200000e0 	.word	0x200000e0
 80015fc:	08001d6f 	.word	0x08001d6f
 8001600:	08001c75 	.word	0x08001c75
 8001604:	2000005c 	.word	0x2000005c
 8001608:	08001e29 	.word	0x08001e29
 800160c:	08001d4b 	.word	0x08001d4b
 8001610:	2000131c 	.word	0x2000131c

08001614 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8001614:	b510      	push	{r4, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <Standard_SetEndPointFeature+0x80>)
 8001618:	6819      	ldr	r1, [r3, #0]
 800161a:	794a      	ldrb	r2, [r1, #5]
  rEP = wIndex0 & ~0x80;
 800161c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8001620:	ea4f 0083 	mov.w	r0, r3, lsl #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001624:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
 8001628:	f504 40b8 	add.w	r0, r4, #23552	; 0x5c00
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800162c:	4c1a      	ldr	r4, [pc, #104]	; (8001698 <Standard_SetEndPointFeature+0x84>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800162e:	6800      	ldr	r0, [r0, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001630:	7824      	ldrb	r4, [r4, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8001632:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001636:	bf14      	ite	ne
 8001638:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800163c:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001640:	42a3      	cmp	r3, r4
 8001642:	d224      	bcs.n	800168e <Standard_SetEndPointFeature+0x7a>
      || pInformation->USBwValue != 0 || Status == 0
 8001644:	884c      	ldrh	r4, [r1, #2]
 8001646:	bb14      	cbnz	r4, 800168e <Standard_SetEndPointFeature+0x7a>
 8001648:	b308      	cbz	r0, 800168e <Standard_SetEndPointFeature+0x7a>
      || pInformation->Current_Configuration == 0)
 800164a:	7a89      	ldrb	r1, [r1, #10]
 800164c:	b1f9      	cbz	r1, 800168e <Standard_SetEndPointFeature+0x7a>
 800164e:	009b      	lsls	r3, r3, #2
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001650:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001654:	f002 0280 	and.w	r2, r2, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001658:	f501 43b8 	add.w	r3, r1, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800165c:	b2d0      	uxtb	r0, r2
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800165e:	6819      	ldr	r1, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001660:	b128      	cbz	r0, 800166e <Standard_SetEndPointFeature+0x5a>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001662:	f648 72bf 	movw	r2, #36799	; 0x8fbf
 8001666:	400a      	ands	r2, r1
 8001668:	f082 0010 	eor.w	r0, r2, #16
 800166c:	e004      	b.n	8001678 <Standard_SetEndPointFeature+0x64>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800166e:	f64b 728f 	movw	r2, #49039	; 0xbf8f
 8001672:	400a      	ands	r2, r1
 8001674:	f482 5080 	eor.w	r0, r2, #4096	; 0x1000
 8001678:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
 800167c:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8001680:	6018      	str	r0, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <Standard_SetEndPointFeature+0x88>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	6991      	ldr	r1, [r2, #24]
 8001688:	4788      	blx	r1
  return USB_SUCCESS;
 800168a:	2000      	movs	r0, #0
 800168c:	bd10      	pop	{r4, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 800168e:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8001690:	bd10      	pop	{r4, pc}
 8001692:	bf00      	nop
 8001694:	20001320 	.word	0x20001320
 8001698:	200000e0 	.word	0x200000e0
 800169c:	2000131c 	.word	0x2000131c

080016a0 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 80016a0:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <Standard_SetDeviceFeature+0x1c>)
 80016a4:	6818      	ldr	r0, [r3, #0]
  pUser_Standard_Requests->User_SetDeviceFeature();
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <Standard_SetDeviceFeature+0x20>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 80016a8:	7a42      	ldrb	r2, [r0, #9]
 80016aa:	f042 0120 	orr.w	r1, r2, #32
 80016ae:	7241      	strb	r1, [r0, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	69c2      	ldr	r2, [r0, #28]
 80016b4:	4790      	blx	r2
  return USB_SUCCESS;
}
 80016b6:	2000      	movs	r0, #0
 80016b8:	bd08      	pop	{r3, pc}
 80016ba:	bf00      	nop
 80016bc:	20001320 	.word	0x20001320
 80016c0:	2000131c 	.word	0x2000131c

080016c4 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <Standard_GetDescriptorData+0x18>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 80016ca:	b918      	cbnz	r0, 80016d4 <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 80016cc:	8889      	ldrh	r1, [r1, #4]
 80016ce:	1acb      	subs	r3, r1, r3
 80016d0:	8213      	strh	r3, [r2, #16]
    return 0;
 80016d2:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 80016d4:	6808      	ldr	r0, [r1, #0]
 80016d6:	18c0      	adds	r0, r0, r3
}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20001320 	.word	0x20001320

080016e0 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 80016e0:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <Post0_Process+0x30>)
 80016e4:	2000      	movs	r0, #0
 80016e6:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <Post0_Process+0x34>)
 80016ec:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 80016ee:	480a      	ldr	r0, [pc, #40]	; (8001718 <Post0_Process+0x38>)
 80016f0:	6801      	ldr	r1, [r0, #0]
 80016f2:	7a08      	ldrb	r0, [r1, #8]
 80016f4:	2808      	cmp	r0, #8
 80016f6:	d106      	bne.n	8001706 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <Post0_Process+0x3c>)
 80016fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016fe:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <Post0_Process+0x40>)
 8001702:	2110      	movs	r1, #16
 8001704:	8011      	strh	r1, [r2, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 8001706:	f1b0 0309 	subs.w	r3, r0, #9
 800170a:	4258      	negs	r0, r3
 800170c:	4158      	adcs	r0, r3
 800170e:	bd08      	pop	{r3, pc}
 8001710:	2000005c 	.word	0x2000005c
 8001714:	08001e29 	.word	0x08001e29
 8001718:	20001320 	.word	0x20001320
 800171c:	20001326 	.word	0x20001326
 8001720:	20001328 	.word	0x20001328

08001724 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8001724:	b570      	push	{r4, r5, r6, lr}
  uint32_t ControlState = pInformation->ControlState;
 8001726:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <Out0_Process+0xbc>)
 8001728:	681c      	ldr	r4, [r3, #0]
 800172a:	7a20      	ldrb	r0, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800172c:	2802      	cmp	r0, #2
 800172e:	d04f      	beq.n	80017d0 <Out0_Process+0xac>
 8001730:	2804      	cmp	r0, #4
 8001732:	d04d      	beq.n	80017d0 <Out0_Process+0xac>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8001734:	2803      	cmp	r0, #3
 8001736:	d001      	beq.n	800173c <Out0_Process+0x18>
 8001738:	2805      	cmp	r0, #5
 800173a:	d143      	bne.n	80017c4 <Out0_Process+0xa0>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 800173c:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 800173e:	8a20      	ldrh	r0, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8001740:	b1a9      	cbz	r1, 800176e <Out0_Process+0x4a>
 8001742:	b1a0      	cbz	r0, 800176e <Out0_Process+0x4a>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8001744:	8aa5      	ldrh	r5, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8001746:	4285      	cmp	r5, r0
 8001748:	bf28      	it	cs
 800174a:	4605      	movcs	r5, r0
 800174c:	4628      	mov	r0, r5
 800174e:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
 8001750:	8a22      	ldrh	r2, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8001752:	4606      	mov	r6, r0
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8001754:	8a60      	ldrh	r0, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 8001756:	1b53      	subs	r3, r2, r5
    pEPinfo->Usb_rOffset += Length;
 8001758:	1829      	adds	r1, r5, r0
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 800175a:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800175c:	8261      	strh	r1, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800175e:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <Out0_Process+0xc0>)
 8001760:	2000      	movs	r0, #0
 8001762:	4790      	blx	r2
 8001764:	462a      	mov	r2, r5
 8001766:	4601      	mov	r1, r0
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <Out0_Process+0xc4>)
 800176a:	4630      	mov	r0, r6
 800176c:	4798      	blx	r3

  }

  if (pEPinfo->Usb_rLength != 0)
 800176e:	8a20      	ldrh	r0, [r4, #16]
 8001770:	b150      	cbz	r0, 8001788 <Out0_Process+0x64>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001772:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <Out0_Process+0xc8>)
    SetEPTxCount(ENDP0, 0);
 8001774:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001776:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800177a:	8011      	strh	r1, [r2, #0]
    SetEPTxCount(ENDP0, 0);
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <Out0_Process+0xcc>)
 800177e:	4601      	mov	r1, r0
 8001780:	4798      	blx	r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8001782:	491c      	ldr	r1, [pc, #112]	; (80017f4 <Out0_Process+0xd0>)
 8001784:	2030      	movs	r0, #48	; 0x30
 8001786:	8008      	strh	r0, [r1, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001788:	8a23      	ldrh	r3, [r4, #16]
 800178a:	8aa2      	ldrh	r2, [r4, #20]
 800178c:	4814      	ldr	r0, [pc, #80]	; (80017e0 <Out0_Process+0xbc>)
 800178e:	429a      	cmp	r2, r3
 8001790:	d802      	bhi.n	8001798 <Out0_Process+0x74>
  {
    pInformation->ControlState = OUT_DATA;
 8001792:	6801      	ldr	r1, [r0, #0]
 8001794:	2203      	movs	r2, #3
 8001796:	e002      	b.n	800179e <Out0_Process+0x7a>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8001798:	b11b      	cbz	r3, 80017a2 <Out0_Process+0x7e>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 800179a:	6801      	ldr	r1, [r0, #0]
 800179c:	2205      	movs	r2, #5
 800179e:	720a      	strb	r2, [r1, #8]
 80017a0:	e00c      	b.n	80017bc <Out0_Process+0x98>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80017a2:	6802      	ldr	r2, [r0, #0]
 80017a4:	2106      	movs	r1, #6
      USB_StatusIn();
 80017a6:	4814      	ldr	r0, [pc, #80]	; (80017f8 <Out0_Process+0xd4>)
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80017a8:	7211      	strb	r1, [r2, #8]
      USB_StatusIn();
 80017aa:	6802      	ldr	r2, [r0, #0]
 80017ac:	4813      	ldr	r0, [pc, #76]	; (80017fc <Out0_Process+0xd8>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80017ae:	b291      	uxth	r1, r2
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 80017b0:	180a      	adds	r2, r1, r0
 80017b2:	0051      	lsls	r1, r2, #1
 80017b4:	600b      	str	r3, [r1, #0]
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <Out0_Process+0xd0>)
 80017b8:	2030      	movs	r0, #48	; 0x30
 80017ba:	8018      	strh	r0, [r3, #0]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 80017bc:	4808      	ldr	r0, [pc, #32]	; (80017e0 <Out0_Process+0xbc>)
 80017be:	6803      	ldr	r3, [r0, #0]
 80017c0:	7a19      	ldrb	r1, [r3, #8]
 80017c2:	e006      	b.n	80017d2 <Out0_Process+0xae>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 80017c4:	2807      	cmp	r0, #7
 80017c6:	d103      	bne.n	80017d0 <Out0_Process+0xac>
  {
    (*pProperty->Process_Status_OUT)();
 80017c8:	490d      	ldr	r1, [pc, #52]	; (8001800 <Out0_Process+0xdc>)
 80017ca:	680a      	ldr	r2, [r1, #0]
 80017cc:	68d3      	ldr	r3, [r2, #12]
 80017ce:	4798      	blx	r3
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 80017d0:	2108      	movs	r1, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 80017d2:	4a03      	ldr	r2, [pc, #12]	; (80017e0 <Out0_Process+0xbc>)

  return Post0_Process();
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <Out0_Process+0xe0>)
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 80017d6:	6810      	ldr	r0, [r2, #0]
 80017d8:	7201      	strb	r1, [r0, #8]

  return Post0_Process();
 80017da:	4798      	blx	r3
}
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
 80017de:	bf00      	nop
 80017e0:	20001320 	.word	0x20001320
 80017e4:	08001df1 	.word	0x08001df1
 80017e8:	08001c27 	.word	0x08001c27
 80017ec:	20001326 	.word	0x20001326
 80017f0:	08001e0d 	.word	0x08001e0d
 80017f4:	20001328 	.word	0x20001328
 80017f8:	40005c50 	.word	0x40005c50
 80017fc:	20003002 	.word	0x20003002
 8001800:	200012f8 	.word	0x200012f8
 8001804:	080016e1 	.word	0x080016e1

08001808 <Setup0_Process>:
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001808:	4b92      	ldr	r3, [pc, #584]	; (8001a54 <Setup0_Process+0x24c>)
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800180a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4992      	ldr	r1, [pc, #584]	; (8001a58 <Setup0_Process+0x250>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001810:	b290      	uxth	r0, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001812:	1844      	adds	r4, r0, r1

  if (pInformation->ControlState != PAUSE)
 8001814:	4e91      	ldr	r6, [pc, #580]	; (8001a5c <Setup0_Process+0x254>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001816:	0065      	lsls	r5, r4, #1
 8001818:	682a      	ldr	r2, [r5, #0]

  if (pInformation->ControlState != PAUSE)
 800181a:	6835      	ldr	r5, [r6, #0]
 800181c:	7a2b      	ldrb	r3, [r5, #8]
 800181e:	2b09      	cmp	r3, #9
 8001820:	d014      	beq.n	800184c <Setup0_Process+0x44>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001822:	b297      	uxth	r7, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001824:	0078      	lsls	r0, r7, #1
 8001826:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 800182a:	f501 44c0 	add.w	r4, r1, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800182e:	7822      	ldrb	r2, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8001830:	4f8b      	ldr	r7, [pc, #556]	; (8001a60 <Setup0_Process+0x258>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8001832:	702a      	strb	r2, [r5, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8001834:	7863      	ldrb	r3, [r4, #1]
 8001836:	706b      	strb	r3, [r5, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8001838:	88a0      	ldrh	r0, [r4, #4]
 800183a:	47b8      	blx	r7
 800183c:	8068      	strh	r0, [r5, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 800183e:	8920      	ldrh	r0, [r4, #8]
 8001840:	6835      	ldr	r5, [r6, #0]
 8001842:	47b8      	blx	r7
 8001844:	80a8      	strh	r0, [r5, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8001846:	89a0      	ldrh	r0, [r4, #12]
 8001848:	6831      	ldr	r1, [r6, #0]
 800184a:	80c8      	strh	r0, [r1, #6]
  }

  pInformation->ControlState = SETTING_UP;
 800184c:	4d83      	ldr	r5, [pc, #524]	; (8001a5c <Setup0_Process+0x254>)
 800184e:	2401      	movs	r4, #1
 8001850:	682b      	ldr	r3, [r5, #0]
  if (pInformation->USBwLength == 0)
 8001852:	88da      	ldrh	r2, [r3, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8001854:	721c      	strb	r4, [r3, #8]
 8001856:	785c      	ldrb	r4, [r3, #1]
  if (pInformation->USBwLength == 0)
 8001858:	2a00      	cmp	r2, #0
 800185a:	d160      	bne.n	800191e <Setup0_Process+0x116>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800185c:	7818      	ldrb	r0, [r3, #0]
 800185e:	f010 027f 	ands.w	r2, r0, #127	; 0x7f
 8001862:	d136      	bne.n	80018d2 <Setup0_Process+0xca>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8001864:	2c09      	cmp	r4, #9
 8001866:	d101      	bne.n	800186c <Setup0_Process+0x64>
    {
      Result = Standard_SetConfiguration();
 8001868:	4b7e      	ldr	r3, [pc, #504]	; (8001a64 <Setup0_Process+0x25c>)
 800186a:	e041      	b.n	80018f0 <Setup0_Process+0xe8>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 800186c:	2c05      	cmp	r4, #5
 800186e:	d10f      	bne.n	8001890 <Setup0_Process+0x88>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001870:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8001874:	2900      	cmp	r1, #0
 8001876:	da01      	bge.n	800187c <Setup0_Process+0x74>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 8001878:	2108      	movs	r1, #8
 800187a:	e04c      	b.n	8001916 <Setup0_Process+0x10e>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800187c:	7898      	ldrb	r0, [r3, #2]
 800187e:	2800      	cmp	r0, #0
 8001880:	d1fa      	bne.n	8001878 <Setup0_Process+0x70>
          || (pInformation->USBwIndex != 0)
 8001882:	889a      	ldrh	r2, [r3, #4]
 8001884:	2a00      	cmp	r2, #0
 8001886:	d1f7      	bne.n	8001878 <Setup0_Process+0x70>
          || (pInformation->Current_Configuration != 0))
 8001888:	7a9b      	ldrb	r3, [r3, #10]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d035      	beq.n	80018fa <Setup0_Process+0xf2>
 800188e:	e7f3      	b.n	8001878 <Setup0_Process+0x70>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8001890:	2c03      	cmp	r4, #3
 8001892:	d10f      	bne.n	80018b4 <Setup0_Process+0xac>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8001894:	78d8      	ldrb	r0, [r3, #3]
 8001896:	2801      	cmp	r0, #1
 8001898:	d007      	beq.n	80018aa <Setup0_Process+0xa2>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800189a:	4973      	ldr	r1, [pc, #460]	; (8001a68 <Setup0_Process+0x260>)
 800189c:	6808      	ldr	r0, [r1, #0]
 800189e:	6942      	ldr	r2, [r0, #20]
 80018a0:	4620      	mov	r0, r4
 80018a2:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 80018a4:	2803      	cmp	r0, #3
 80018a6:	d126      	bne.n	80018f6 <Setup0_Process+0xee>
 80018a8:	e034      	b.n	8001914 <Setup0_Process+0x10c>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
          && (pInformation->USBwIndex == 0))
 80018aa:	889a      	ldrh	r2, [r3, #4]
 80018ac:	2a00      	cmp	r2, #0
 80018ae:	d1f4      	bne.n	800189a <Setup0_Process+0x92>
      {
        Result = Standard_SetDeviceFeature();
 80018b0:	4b6e      	ldr	r3, [pc, #440]	; (8001a6c <Setup0_Process+0x264>)
 80018b2:	e01d      	b.n	80018f0 <Setup0_Process+0xe8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 80018b4:	2c01      	cmp	r4, #1
 80018b6:	d1f0      	bne.n	800189a <Setup0_Process+0x92>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 80018b8:	78d9      	ldrb	r1, [r3, #3]
 80018ba:	2901      	cmp	r1, #1
 80018bc:	d1ed      	bne.n	800189a <Setup0_Process+0x92>
          && pInformation->USBwIndex == 0
 80018be:	8898      	ldrh	r0, [r3, #4]
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d1ea      	bne.n	800189a <Setup0_Process+0x92>
          && ValBit(pInformation->Current_Feature, 5))
 80018c4:	7a5a      	ldrb	r2, [r3, #9]
 80018c6:	f002 0320 	and.w	r3, r2, #32
 80018ca:	b2d9      	uxtb	r1, r3
 80018cc:	2900      	cmp	r1, #0
 80018ce:	d0e4      	beq.n	800189a <Setup0_Process+0x92>
 80018d0:	e009      	b.n	80018e6 <Setup0_Process+0xde>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80018d2:	2a01      	cmp	r2, #1
 80018d4:	d103      	bne.n	80018de <Setup0_Process+0xd6>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 80018d6:	2c0b      	cmp	r4, #11
 80018d8:	d1df      	bne.n	800189a <Setup0_Process+0x92>
    {
      Result = Standard_SetInterface();
 80018da:	4b65      	ldr	r3, [pc, #404]	; (8001a70 <Setup0_Process+0x268>)
 80018dc:	e008      	b.n	80018f0 <Setup0_Process+0xe8>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80018de:	2a02      	cmp	r2, #2
 80018e0:	d1db      	bne.n	800189a <Setup0_Process+0x92>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 80018e2:	2c01      	cmp	r4, #1
 80018e4:	d101      	bne.n	80018ea <Setup0_Process+0xe2>
    {
      Result = Standard_ClearFeature();
 80018e6:	4b63      	ldr	r3, [pc, #396]	; (8001a74 <Setup0_Process+0x26c>)
 80018e8:	e002      	b.n	80018f0 <Setup0_Process+0xe8>
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 80018ea:	2c03      	cmp	r4, #3
 80018ec:	d1d5      	bne.n	800189a <Setup0_Process+0x92>
    {
      Result = Standard_SetEndPointFeature();
 80018ee:	4b62      	ldr	r3, [pc, #392]	; (8001a78 <Setup0_Process+0x270>)
 80018f0:	4798      	blx	r3
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 80018f2:	b110      	cbz	r0, 80018fa <Setup0_Process+0xf2>
 80018f4:	e7d1      	b.n	800189a <Setup0_Process+0x92>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 80018f6:	2800      	cmp	r0, #0
 80018f8:	d1be      	bne.n	8001878 <Setup0_Process+0x70>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 80018fa:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <Setup0_Process+0x24c>)
 80018fc:	4a5f      	ldr	r2, [pc, #380]	; (8001a7c <Setup0_Process+0x274>)
 80018fe:	6819      	ldr	r1, [r3, #0]
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001900:	b288      	uxth	r0, r1
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8001902:	1883      	adds	r3, r0, r2
 8001904:	0059      	lsls	r1, r3, #1
 8001906:	4b5e      	ldr	r3, [pc, #376]	; (8001a80 <Setup0_Process+0x278>)
 8001908:	2000      	movs	r0, #0
 800190a:	2230      	movs	r2, #48	; 0x30
 800190c:	6008      	str	r0, [r1, #0]
 800190e:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 8001910:	2106      	movs	r1, #6
 8001912:	e000      	b.n	8001916 <Setup0_Process+0x10e>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 8001914:	2109      	movs	r1, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8001916:	4851      	ldr	r0, [pc, #324]	; (8001a5c <Setup0_Process+0x254>)
 8001918:	6802      	ldr	r2, [r0, #0]
 800191a:	7211      	strb	r1, [r2, #8]
 800191c:	e0e0      	b.n	8001ae0 <Setup0_Process+0x2d8>

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 800191e:	2c06      	cmp	r4, #6
 8001920:	d113      	bne.n	800194a <Setup0_Process+0x142>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001922:	781c      	ldrb	r4, [r3, #0]
 8001924:	0661      	lsls	r1, r4, #25
 8001926:	d17b      	bne.n	8001a20 <Setup0_Process+0x218>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8001928:	789a      	ldrb	r2, [r3, #2]
 800192a:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <Setup0_Process+0x260>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 800192c:	2a01      	cmp	r2, #1
 800192e:	d102      	bne.n	8001936 <Setup0_Process+0x12e>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8001930:	681c      	ldr	r4, [r3, #0]
 8001932:	69e3      	ldr	r3, [r4, #28]
 8001934:	e06a      	b.n	8001a0c <Setup0_Process+0x204>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8001936:	2a02      	cmp	r2, #2
 8001938:	d102      	bne.n	8001940 <Setup0_Process+0x138>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	6a03      	ldr	r3, [r0, #32]
 800193e:	e065      	b.n	8001a0c <Setup0_Process+0x204>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8001940:	2a03      	cmp	r2, #3
 8001942:	d16d      	bne.n	8001a20 <Setup0_Process+0x218>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001948:	e060      	b.n	8001a0c <Setup0_Process+0x204>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 800194a:	2c00      	cmp	r4, #0
 800194c:	d13e      	bne.n	80019cc <Setup0_Process+0x1c4>
 800194e:	8859      	ldrh	r1, [r3, #2]
 8001950:	2900      	cmp	r1, #0
 8001952:	d165      	bne.n	8001a20 <Setup0_Process+0x218>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8001954:	6858      	ldr	r0, [r3, #4]
 8001956:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 800195a:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800195e:	d15f      	bne.n	8001a20 <Setup0_Process+0x218>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001960:	781c      	ldrb	r4, [r3, #0]
 8001962:	f014 007f 	ands.w	r0, r4, #127	; 0x7f
 8001966:	d104      	bne.n	8001972 <Setup0_Process+0x16a>
        && (pInformation->USBwIndex == 0))
 8001968:	8898      	ldrh	r0, [r3, #4]
 800196a:	2800      	cmp	r0, #0
 800196c:	f000 80bb 	beq.w	8001ae6 <Setup0_Process+0x2de>
 8001970:	e056      	b.n	8001a20 <Setup0_Process+0x218>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001972:	2801      	cmp	r0, #1
 8001974:	d10c      	bne.n	8001990 <Setup0_Process+0x188>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8001976:	4a3c      	ldr	r2, [pc, #240]	; (8001a68 <Setup0_Process+0x260>)
 8001978:	7958      	ldrb	r0, [r3, #5]
 800197a:	6814      	ldr	r4, [r2, #0]
 800197c:	69a2      	ldr	r2, [r4, #24]
 800197e:	4790      	blx	r2
 8001980:	2800      	cmp	r0, #0
 8001982:	d14d      	bne.n	8001a20 <Setup0_Process+0x218>
          && (pInformation->Current_Configuration != 0))
 8001984:	682b      	ldr	r3, [r5, #0]
 8001986:	7a99      	ldrb	r1, [r3, #10]
 8001988:	2900      	cmp	r1, #0
 800198a:	f040 80ac 	bne.w	8001ae6 <Setup0_Process+0x2de>
 800198e:	e047      	b.n	8001a20 <Setup0_Process+0x218>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001990:	2802      	cmp	r0, #2
 8001992:	d145      	bne.n	8001a20 <Setup0_Process+0x218>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8001994:	795b      	ldrb	r3, [r3, #5]
 8001996:	f003 010f 	and.w	r1, r3, #15
 800199a:	ea4f 0281 	mov.w	r2, r1, lsl #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800199e:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 80019a2:	f504 40b8 	add.w	r0, r4, #23552	; 0x5c00
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80019a6:	4c37      	ldr	r4, [pc, #220]	; (8001a84 <Setup0_Process+0x27c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 80019a8:	6802      	ldr	r2, [r0, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80019aa:	7820      	ldrb	r0, [r4, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 80019ac:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 80019b0:	bf14      	ite	ne
 80019b2:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 80019b6:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80019ba:	4281      	cmp	r1, r0
 80019bc:	d230      	bcs.n	8001a20 <Setup0_Process+0x218>
 80019be:	f013 0f70 	tst.w	r3, #112	; 0x70
 80019c2:	d12d      	bne.n	8001a20 <Setup0_Process+0x218>
          && (Status != 0))
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	f040 808e 	bne.w	8001ae6 <Setup0_Process+0x2de>
 80019ca:	e029      	b.n	8001a20 <Setup0_Process+0x218>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 80019cc:	2c08      	cmp	r4, #8
 80019ce:	d104      	bne.n	80019da <Setup0_Process+0x1d2>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80019d0:	7819      	ldrb	r1, [r3, #0]
 80019d2:	064a      	lsls	r2, r1, #25
 80019d4:	f000 8089 	beq.w	8001aea <Setup0_Process+0x2e2>
 80019d8:	e022      	b.n	8001a20 <Setup0_Process+0x218>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 80019da:	2c0a      	cmp	r4, #10
 80019dc:	d120      	bne.n	8001a20 <Setup0_Process+0x218>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80019de:	7818      	ldrb	r0, [r3, #0]
 80019e0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80019e4:	2901      	cmp	r1, #1
 80019e6:	d11b      	bne.n	8001a20 <Setup0_Process+0x218>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 80019e8:	7a9c      	ldrb	r4, [r3, #10]
 80019ea:	b1cc      	cbz	r4, 8001a20 <Setup0_Process+0x218>
 80019ec:	8859      	ldrh	r1, [r3, #2]
 80019ee:	b9b9      	cbnz	r1, 8001a20 <Setup0_Process+0x218>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	f422 407f 	bic.w	r0, r2, #65280	; 0xff00
 80019f6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80019fa:	d111      	bne.n	8001a20 <Setup0_Process+0x218>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 80019fc:	4c1a      	ldr	r4, [pc, #104]	; (8001a68 <Setup0_Process+0x260>)
 80019fe:	7958      	ldrb	r0, [r3, #5]
 8001a00:	6822      	ldr	r2, [r4, #0]
 8001a02:	6994      	ldr	r4, [r2, #24]
 8001a04:	47a0      	blx	r4
 8001a06:	2800      	cmp	r0, #0
 8001a08:	d071      	beq.n	8001aee <Setup0_Process+0x2e6>
 8001a0a:	e009      	b.n	8001a20 <Setup0_Process+0x218>
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8001a0c:	b143      	cbz	r3, 8001a20 <Setup0_Process+0x218>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001a0e:	4813      	ldr	r0, [pc, #76]	; (8001a5c <Setup0_Process+0x254>)
 8001a10:	2400      	movs	r4, #0
 8001a12:	6801      	ldr	r1, [r0, #0]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8001a14:	4620      	mov	r0, r4

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001a16:	824c      	strh	r4, [r1, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001a18:	618b      	str	r3, [r1, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8001a1a:	4798      	blx	r3
    Result = USB_SUCCESS;
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	e00a      	b.n	8001a36 <Setup0_Process+0x22e>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8001a20:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <Setup0_Process+0x260>)
 8001a22:	4c0e      	ldr	r4, [pc, #56]	; (8001a5c <Setup0_Process+0x254>)
 8001a24:	6811      	ldr	r1, [r2, #0]
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	690a      	ldr	r2, [r1, #16]
 8001a2a:	7858      	ldrb	r0, [r3, #1]
 8001a2c:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 8001a2e:	2803      	cmp	r0, #3
 8001a30:	d101      	bne.n	8001a36 <Setup0_Process+0x22e>
    {
      pInformation->ControlState = PAUSE;
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	e006      	b.n	8001a44 <Setup0_Process+0x23c>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <Setup0_Process+0x254>)
 8001a38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	8a1a      	ldrh	r2, [r3, #16]
 8001a40:	428a      	cmp	r2, r1
 8001a42:	d101      	bne.n	8001a48 <Setup0_Process+0x240>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8001a44:	2109      	movs	r1, #9
 8001a46:	e003      	b.n	8001a50 <Setup0_Process+0x248>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8001a48:	2802      	cmp	r0, #2
 8001a4a:	d000      	beq.n	8001a4e <Setup0_Process+0x246>
 8001a4c:	b9e2      	cbnz	r2, 8001a88 <Setup0_Process+0x280>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8001a4e:	2108      	movs	r1, #8
 8001a50:	7219      	strb	r1, [r3, #8]
 8001a52:	e045      	b.n	8001ae0 <Setup0_Process+0x2d8>
 8001a54:	40005c50 	.word	0x40005c50
 8001a58:	20003004 	.word	0x20003004
 8001a5c:	20001320 	.word	0x20001320
 8001a60:	08001e85 	.word	0x08001e85
 8001a64:	080014a9 	.word	0x080014a9
 8001a68:	200012f8 	.word	0x200012f8
 8001a6c:	080016a1 	.word	0x080016a1
 8001a70:	080014e1 	.word	0x080014e1
 8001a74:	08001529 	.word	0x08001529
 8001a78:	08001615 	.word	0x08001615
 8001a7c:	20003002 	.word	0x20003002
 8001a80:	20001328 	.word	0x20001328
 8001a84:	200000e0 	.word	0x200000e0
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8001a88:	f993 0000 	ldrsb.w	r0, [r3]
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	da21      	bge.n	8001ad4 <Setup0_Process+0x2cc>
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8001a90:	88d9      	ldrh	r1, [r3, #6]
 8001a92:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8001a94:	9801      	ldr	r0, [sp, #4]
 8001a96:	4282      	cmp	r2, r0
 8001a98:	d902      	bls.n	8001aa0 <Setup0_Process+0x298>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8001a9a:	9a01      	ldr	r2, [sp, #4]
 8001a9c:	821a      	strh	r2, [r3, #16]
 8001a9e:	e011      	b.n	8001ac4 <Setup0_Process+0x2bc>
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8001aa0:	428a      	cmp	r2, r1
 8001aa2:	d20f      	bcs.n	8001ac4 <Setup0_Process+0x2bc>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8001aa4:	4913      	ldr	r1, [pc, #76]	; (8001af4 <Setup0_Process+0x2ec>)
 8001aa6:	6808      	ldr	r0, [r1, #0]
 8001aa8:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 8001aac:	428a      	cmp	r2, r1
 8001aae:	d201      	bcs.n	8001ab4 <Setup0_Process+0x2ac>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	e005      	b.n	8001ac0 <Setup0_Process+0x2b8>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8001ab4:	fb92 f0f1 	sdiv	r0, r2, r1
 8001ab8:	fb01 2210 	mls	r2, r1, r0, r2
 8001abc:	b912      	cbnz	r2, 8001ac4 <Setup0_Process+0x2bc>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8001abe:	2101      	movs	r1, #1
 8001ac0:	480d      	ldr	r0, [pc, #52]	; (8001af8 <Setup0_Process+0x2f0>)
 8001ac2:	7001      	strb	r1, [r0, #0]
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8001ac4:	490b      	ldr	r1, [pc, #44]	; (8001af4 <Setup0_Process+0x2ec>)
 8001ac6:	6808      	ldr	r0, [r1, #0]
 8001ac8:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8001acc:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <Setup0_Process+0x2f4>)
 8001ad0:	4798      	blx	r3
 8001ad2:	e005      	b.n	8001ae0 <Setup0_Process+0x2d8>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <Setup0_Process+0x2f8>)
 8001ada:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001ade:	8019      	strh	r1, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <Setup0_Process+0x2fc>)
 8001ae2:	4798      	blx	r3
}
 8001ae4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <Setup0_Process+0x300>)
 8001ae8:	e791      	b.n	8001a0e <Setup0_Process+0x206>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <Setup0_Process+0x304>)
 8001aec:	e78f      	b.n	8001a0e <Setup0_Process+0x206>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <Setup0_Process+0x308>)
 8001af0:	e78d      	b.n	8001a0e <Setup0_Process+0x206>
 8001af2:	bf00      	nop
 8001af4:	200012f8 	.word	0x200012f8
 8001af8:	200002c8 	.word	0x200002c8
 8001afc:	080013f9 	.word	0x080013f9
 8001b00:	20001326 	.word	0x20001326
 8001b04:	080016e1 	.word	0x080016e1
 8001b08:	0800135d 	.word	0x0800135d
 8001b0c:	08001315 	.word	0x08001315
 8001b10:	08001339 	.word	0x08001339

08001b14 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8001b14:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <SetDeviceAddress+0x38>)
 8001b18:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	42a3      	cmp	r3, r4
 8001b1e:	d210      	bcs.n	8001b42 <SetDeviceAddress+0x2e>
* Description    : Set the device and all the used Endpoints addresses.
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
 8001b20:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8001b24:	f502 55b8 	add.w	r5, r2, #5888	; 0x1700
 8001b28:	00a9      	lsls	r1, r5, #2
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8001b2a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001b2e:	680e      	ldr	r6, [r1, #0]
 8001b30:	f042 0580 	orr.w	r5, r2, #128	; 0x80
 8001b34:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001b38:	4032      	ands	r2, r6
 8001b3a:	432a      	orrs	r2, r5
 8001b3c:	600a      	str	r2, [r1, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8001b3e:	3301      	adds	r3, #1
 8001b40:	e7ec      	b.n	8001b1c <SetDeviceAddress+0x8>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8001b42:	4903      	ldr	r1, [pc, #12]	; (8001b50 <SetDeviceAddress+0x3c>)
 8001b44:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001b48:	6008      	str	r0, [r1, #0]
 8001b4a:	bd70      	pop	{r4, r5, r6, pc}
 8001b4c:	200000e0 	.word	0x200000e0
 8001b50:	40005c4c 	.word	0x40005c4c

08001b54 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8001b54:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8001b56:	4913      	ldr	r1, [pc, #76]	; (8001ba4 <In0_Process+0x50>)
 8001b58:	680b      	ldr	r3, [r1, #0]
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8001b5e:	2a02      	cmp	r2, #2
 8001b60:	d001      	beq.n	8001b66 <In0_Process+0x12>
 8001b62:	2a04      	cmp	r2, #4
 8001b64:	d104      	bne.n	8001b70 <In0_Process+0x1c>
  {
    DataStageIn();
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <In0_Process+0x54>)
 8001b68:	4798      	blx	r3
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8001b6a:	6822      	ldr	r2, [r4, #0]
 8001b6c:	7a11      	ldrb	r1, [r2, #8]
 8001b6e:	e013      	b.n	8001b98 <In0_Process+0x44>
  }

  else if (ControlState == WAIT_STATUS_IN)
 8001b70:	2a06      	cmp	r2, #6
 8001b72:	d110      	bne.n	8001b96 <In0_Process+0x42>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8001b74:	7858      	ldrb	r0, [r3, #1]
 8001b76:	2805      	cmp	r0, #5
 8001b78:	d109      	bne.n	8001b8e <In0_Process+0x3a>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8001b7a:	7819      	ldrb	r1, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8001b7c:	0648      	lsls	r0, r1, #25
 8001b7e:	d106      	bne.n	8001b8e <In0_Process+0x3a>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8001b80:	78d8      	ldrb	r0, [r3, #3]
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <In0_Process+0x58>)
 8001b84:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <In0_Process+0x5c>)
 8001b88:	6810      	ldr	r0, [r2, #0]
 8001b8a:	6a01      	ldr	r1, [r0, #32]
 8001b8c:	4788      	blx	r1
    }
    (*pProperty->Process_Status_IN)();
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <In0_Process+0x60>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	6890      	ldr	r0, [r2, #8]
 8001b94:	4780      	blx	r0
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 8001b96:	2108      	movs	r1, #8
  }

  pInformation->ControlState = ControlState;
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <In0_Process+0x50>)
 8001b9a:	6803      	ldr	r3, [r0, #0]
 8001b9c:	7219      	strb	r1, [r3, #8]

  return Post0_Process();
 8001b9e:	4906      	ldr	r1, [pc, #24]	; (8001bb8 <In0_Process+0x64>)
 8001ba0:	4788      	blx	r1
}
 8001ba2:	bd10      	pop	{r4, pc}
 8001ba4:	20001320 	.word	0x20001320
 8001ba8:	080013f9 	.word	0x080013f9
 8001bac:	08001b15 	.word	0x08001b15
 8001bb0:	2000131c 	.word	0x2000131c
 8001bb4:	200012f8 	.word	0x200012f8
 8001bb8:	080016e1 	.word	0x080016e1

08001bbc <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8001bbc:	4770      	bx	lr
	...

08001bc0 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8001bc0:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 8001bc2:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <USB_Init+0x20>)
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <USB_Init+0x24>)
  pInformation->ControlState = 2;
 8001bc6:	2002      	movs	r0, #2
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8001bc8:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 8001bca:	7218      	strb	r0, [r3, #8]
  pProperty = &Device_Property;
 8001bcc:	4906      	ldr	r1, [pc, #24]	; (8001be8 <USB_Init+0x28>)
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <USB_Init+0x2c>)
  pUser_Standard_Requests = &User_Standard_Requests;
 8001bd0:	4807      	ldr	r0, [pc, #28]	; (8001bf0 <USB_Init+0x30>)
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <USB_Init+0x34>)
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8001bd4:	600b      	str	r3, [r1, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8001bd6:	6010      	str	r0, [r2, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4798      	blx	r3
 8001bdc:	bd08      	pop	{r3, pc}
 8001bde:	bf00      	nop
 8001be0:	20001320 	.word	0x20001320
 8001be4:	20001300 	.word	0x20001300
 8001be8:	200012f8 	.word	0x200012f8
 8001bec:	2000005c 	.word	0x2000005c
 8001bf0:	2000008c 	.word	0x2000008c
 8001bf4:	2000131c 	.word	0x2000131c

08001bf8 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001bf8:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8001bfa:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8001bfe:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001c02:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8001c04:	0059      	lsls	r1, r3, #1
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001c06:	1052      	asrs	r2, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	3002      	adds	r0, #2
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d009      	beq.n	8001c24 <UserToPMABufferCopy+0x2c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8001c10:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8001c14:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8001c18:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8001c1c:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 8001c20:	3301      	adds	r3, #1
 8001c22:	e7f2      	b.n	8001c0a <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001c24:	bd30      	pop	{r4, r5, pc}

08001c26 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8001c26:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001c2a:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8001c2c:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8001c2e:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8001c32:	1052      	asrs	r2, r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8001c34:	0064      	lsls	r4, r4, #1
  for (i = n; i != 0; i--)
 8001c36:	2300      	movs	r3, #0
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d005      	beq.n	8001c48 <PMAToUserBufferCopy+0x22>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001c3c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8001c40:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
 8001c44:	3301      	adds	r3, #1
 8001c46:	e7f7      	b.n	8001c38 <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 8001c48:	bd10      	pop	{r4, pc}
	...

08001c4c <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8001c4c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001c50:	4a01      	ldr	r2, [pc, #4]	; (8001c58 <SetBTABLE+0xc>)
 8001c52:	4003      	ands	r3, r0
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4770      	bx	lr
 8001c58:	40005c50 	.word	0x40005c50

08001c5c <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8001c5c:	0080      	lsls	r0, r0, #2
 8001c5e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001c62:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001c66:	6810      	ldr	r0, [r2, #0]
 8001c68:	f648 138f 	movw	r3, #35215	; 0x898f
 8001c6c:	4003      	ands	r3, r0
 8001c6e:	4319      	orrs	r1, r3
 8001c70:	6011      	str	r1, [r2, #0]
 8001c72:	4770      	bx	lr

08001c74 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8001c74:	0080      	lsls	r0, r0, #2
 8001c76:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001c7a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001c7e:	6810      	ldr	r0, [r2, #0]
 8001c80:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8001c84:	4003      	ands	r3, r0
 8001c86:	f001 0010 	and.w	r0, r1, #16
 8001c8a:	b280      	uxth	r0, r0
 8001c8c:	b908      	cbnz	r0, 8001c92 <SetEPTxStatus+0x1e>
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	e001      	b.n	8001c96 <SetEPTxStatus+0x22>
 8001c92:	f083 0310 	eor.w	r3, r3, #16
 8001c96:	f001 0120 	and.w	r1, r1, #32
 8001c9a:	b288      	uxth	r0, r1
 8001c9c:	b108      	cbz	r0, 8001ca2 <SetEPTxStatus+0x2e>
 8001c9e:	f083 0320 	eor.w	r3, r3, #32
 8001ca2:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8001ca6:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8001caa:	6010      	str	r0, [r2, #0]
 8001cac:	4770      	bx	lr

08001cae <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8001cae:	0080      	lsls	r0, r0, #2
 8001cb0:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001cb4:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001cb8:	6810      	ldr	r0, [r2, #0]
 8001cba:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8001cbe:	4003      	ands	r3, r0
 8001cc0:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 8001cc4:	b280      	uxth	r0, r0
 8001cc6:	b908      	cbnz	r0, 8001ccc <SetEPRxStatus+0x1e>
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	e001      	b.n	8001cd0 <SetEPRxStatus+0x22>
 8001ccc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001cd0:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8001cd4:	b288      	uxth	r0, r1
 8001cd6:	b108      	cbz	r0, 8001cdc <SetEPRxStatus+0x2e>
 8001cd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001cdc:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8001ce0:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8001ce4:	6010      	str	r0, [r2, #0]
 8001ce6:	4770      	bx	lr

08001ce8 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8001ce8:	0080      	lsls	r0, r0, #2
 8001cea:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001cee:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8001cf2:	6801      	ldr	r1, [r0, #0]
 8001cf4:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8001cf8:	400b      	ands	r3, r1
 8001cfa:	f083 0230 	eor.w	r2, r3, #48	; 0x30
 8001cfe:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8001d02:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8001d06:	6003      	str	r3, [r0, #0]
 8001d08:	4770      	bx	lr

08001d0a <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8001d0a:	0080      	lsls	r0, r0, #2
 8001d0c:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001d10:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8001d14:	6801      	ldr	r1, [r0, #0]
 8001d16:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8001d1a:	400b      	ands	r3, r1
 8001d1c:	f483 5240 	eor.w	r2, r3, #12288	; 0x3000
 8001d20:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8001d24:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8001d28:	6003      	str	r3, [r0, #0]
 8001d2a:	4770      	bx	lr

08001d2c <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8001d2c:	0080      	lsls	r0, r0, #2
 8001d2e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001d32:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8001d36:	6801      	ldr	r1, [r0, #0]
 8001d38:	f640 630f 	movw	r3, #3599	; 0xe0f
 8001d3c:	400b      	ands	r3, r1
 8001d3e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001d42:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8001d46:	6001      	str	r1, [r0, #0]
 8001d48:	4770      	bx	lr

08001d4a <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8001d4a:	0080      	lsls	r0, r0, #2
 8001d4c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8001d50:	f503 40b8 	add.w	r0, r3, #23552	; 0x5c00
 8001d54:	6802      	ldr	r2, [r0, #0]
 8001d56:	0451      	lsls	r1, r2, #17
 8001d58:	d508      	bpl.n	8001d6c <ClearDTOG_RX+0x22>
 8001d5a:	6801      	ldr	r1, [r0, #0]
 8001d5c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001d60:	400b      	ands	r3, r1
 8001d62:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8001d66:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8001d6a:	6001      	str	r1, [r0, #0]
 8001d6c:	4770      	bx	lr

08001d6e <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8001d6e:	0080      	lsls	r0, r0, #2
 8001d70:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8001d74:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	0650      	lsls	r0, r2, #25
 8001d7c:	d508      	bpl.n	8001d90 <ClearDTOG_TX+0x22>
 8001d7e:	6819      	ldr	r1, [r3, #0]
 8001d80:	f640 700f 	movw	r0, #3855	; 0xf0f
 8001d84:	4008      	ands	r0, r1
 8001d86:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 8001d8a:	f042 01c0 	orr.w	r1, r2, #192	; 0xc0
 8001d8e:	6019      	str	r1, [r3, #0]
 8001d90:	4770      	bx	lr
	...

08001d94 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <SetEPTxAddr+0x1c>)
 8001d96:	0849      	lsrs	r1, r1, #1
 8001d98:	681a      	ldr	r2, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8001d9a:	b293      	uxth	r3, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8001d9c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001da0:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8001da4:	f502 5340 	add.w	r3, r2, #12288	; 0x3000
 8001da8:	0058      	lsls	r0, r3, #1
 8001daa:	004a      	lsls	r2, r1, #1
 8001dac:	6002      	str	r2, [r0, #0]
 8001dae:	4770      	bx	lr
 8001db0:	40005c50 	.word	0x40005c50

08001db4 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <SetEPRxAddr+0x18>)
 8001db6:	0849      	lsrs	r1, r1, #1
 8001db8:	681a      	ldr	r2, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8001dba:	b293      	uxth	r3, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <SetEPRxAddr+0x1c>)
 8001dbe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001dc2:	1883      	adds	r3, r0, r2
 8001dc4:	0058      	lsls	r0, r3, #1
 8001dc6:	004a      	lsls	r2, r1, #1
 8001dc8:	6002      	str	r2, [r0, #0]
 8001dca:	4770      	bx	lr
 8001dcc:	40005c50 	.word	0x40005c50
 8001dd0:	20003004 	.word	0x20003004

08001dd4 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <GetEPTxAddr+0x18>)
 8001dd6:	6819      	ldr	r1, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8001dd8:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8001dda:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001dde:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 8001de2:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
 8001de6:	004a      	lsls	r2, r1, #1
}
 8001de8:	8810      	ldrh	r0, [r2, #0]
 8001dea:	4770      	bx	lr
 8001dec:	40005c50 	.word	0x40005c50

08001df0 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <GetEPRxAddr+0x14>)
 8001df2:	6819      	ldr	r1, [r3, #0]
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <GetEPRxAddr+0x18>)
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8001df6:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8001df8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001dfc:	18c1      	adds	r1, r0, r3
 8001dfe:	004a      	lsls	r2, r1, #1
}
 8001e00:	8810      	ldrh	r0, [r2, #0]
 8001e02:	4770      	bx	lr
 8001e04:	40005c50 	.word	0x40005c50
 8001e08:	20003004 	.word	0x20003004

08001e0c <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <SetEPTxCount+0x14>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8001e10:	b293      	uxth	r3, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8001e12:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <SetEPTxCount+0x18>)
 8001e14:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001e18:	1883      	adds	r3, r0, r2
 8001e1a:	0058      	lsls	r0, r3, #1
 8001e1c:	6001      	str	r1, [r0, #0]
 8001e1e:	4770      	bx	lr
 8001e20:	40005c50 	.word	0x40005c50
 8001e24:	20003002 	.word	0x20003002

08001e28 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <SetEPRxCount+0x34>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8001e2c:	b293      	uxth	r3, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8001e2e:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <SetEPRxCount+0x38>)
 8001e30:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001e34:	1883      	adds	r3, r0, r2
 8001e36:	005a      	lsls	r2, r3, #1
 8001e38:	293e      	cmp	r1, #62	; 0x3e
 8001e3a:	d908      	bls.n	8001e4e <SetEPRxCount+0x26>
 8001e3c:	094b      	lsrs	r3, r1, #5
 8001e3e:	06c9      	lsls	r1, r1, #27
 8001e40:	d101      	bne.n	8001e46 <SetEPRxCount+0x1e>
 8001e42:	1e58      	subs	r0, r3, #1
 8001e44:	b283      	uxth	r3, r0
 8001e46:	0299      	lsls	r1, r3, #10
 8001e48:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001e4c:	e004      	b.n	8001e58 <SetEPRxCount+0x30>
 8001e4e:	084b      	lsrs	r3, r1, #1
 8001e50:	07c8      	lsls	r0, r1, #31
 8001e52:	bf48      	it	mi
 8001e54:	3301      	addmi	r3, #1
 8001e56:	0299      	lsls	r1, r3, #10
 8001e58:	6011      	str	r1, [r2, #0]
 8001e5a:	4770      	bx	lr
 8001e5c:	40005c50 	.word	0x40005c50
 8001e60:	20003006 	.word	0x20003006

08001e64 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <GetEPRxCount+0x18>)
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <GetEPRxCount+0x1c>)
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8001e6a:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8001e6c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001e70:	18c1      	adds	r1, r0, r3
 8001e72:	004a      	lsls	r2, r1, #1
 8001e74:	6810      	ldr	r0, [r2, #0]
 8001e76:	0583      	lsls	r3, r0, #22
}
 8001e78:	0d98      	lsrs	r0, r3, #22
 8001e7a:	4770      	bx	lr
 8001e7c:	40005c50 	.word	0x40005c50
 8001e80:	20003006 	.word	0x20003006

08001e84 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8001e84:	b2c3      	uxtb	r3, r0
 8001e86:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8001e88:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001e8c:	4770      	bx	lr
	...

08001e90 <USB_SIL_Init>:
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <USB_SIL_Init+0x14>)
 8001e92:	2000      	movs	r0, #0
 8001e94:	6018      	str	r0, [r3, #0]
  wInterrupt_Mask = IMR_MSK;
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <USB_SIL_Init+0x18>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <USB_SIL_Init+0x1c>)
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8001e9a:	f44f 4106 	mov.w	r1, #34304	; 0x8600
 8001e9e:	8011      	strh	r1, [r2, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8001ea0:	6019      	str	r1, [r3, #0]
  return 0;
}
 8001ea2:	4770      	bx	lr
 8001ea4:	40005c44 	.word	0x40005c44
 8001ea8:	20001324 	.word	0x20001324
 8001eac:	40005c40 	.word	0x40005c40

08001eb0 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8001eb0:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8001eb2:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <USB_SIL_Read+0x24>)
 8001eb8:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8001eba:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8001ebc:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8001ebe:	4906      	ldr	r1, [pc, #24]	; (8001ed8 <USB_SIL_Read+0x28>)
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8001ec0:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	4788      	blx	r1
 8001ec6:	4622      	mov	r2, r4
 8001ec8:	4601      	mov	r1, r0
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <USB_SIL_Read+0x2c>)
 8001ecc:	4630      	mov	r0, r6
 8001ece:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	bd70      	pop	{r4, r5, r6, pc}
 8001ed4:	08001e65 	.word	0x08001e65
 8001ed8:	08001df1 	.word	0x08001df1
 8001edc:	08001c27 	.word	0x08001c27

08001ee0 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8001ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint16_t wEPVal = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8001ee8:	4857      	ldr	r0, [pc, #348]	; (8002048 <CTR_LP+0x168>)
 8001eea:	4b58      	ldr	r3, [pc, #352]	; (800204c <CTR_LP+0x16c>)
 8001eec:	6802      	ldr	r2, [r0, #0]
 8001eee:	b291      	uxth	r1, r2
 8001ef0:	0412      	lsls	r2, r2, #16
 8001ef2:	8019      	strh	r1, [r3, #0]
 8001ef4:	f140 80a6 	bpl.w	8002044 <CTR_LP+0x164>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8001ef8:	8818      	ldrh	r0, [r3, #0]
 8001efa:	4955      	ldr	r1, [pc, #340]	; (8002050 <CTR_LP+0x170>)
 8001efc:	f000 020f 	and.w	r2, r0, #15
 8001f00:	700a      	strb	r2, [r1, #0]
    if (EPindex == 0)
 8001f02:	2a00      	cmp	r2, #0
 8001f04:	d16c      	bne.n	8001fe0 <CTR_LP+0x100>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8001f06:	4c53      	ldr	r4, [pc, #332]	; (8002054 <CTR_LP+0x174>)
 8001f08:	6825      	ldr	r5, [r4, #0]
 8001f0a:	b2aa      	uxth	r2, r5
 8001f0c:	4d52      	ldr	r5, [pc, #328]	; (8002058 <CTR_LP+0x178>)
 8001f0e:	802a      	strh	r2, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8001f10:	8829      	ldrh	r1, [r5, #0]
 8001f12:	4a52      	ldr	r2, [pc, #328]	; (800205c <CTR_LP+0x17c>)
 8001f14:	f001 0030 	and.w	r0, r1, #48	; 0x30
 8001f18:	8010      	strh	r0, [r2, #0]
	    SaveRState &=  EPRX_STAT;	
 8001f1a:	8829      	ldrh	r1, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8001f1c:	f64b 72bf 	movw	r2, #49087	; 0xbfbf
      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
	    SaveRState &=  EPRX_STAT;	
 8001f20:	f401 5040 	and.w	r0, r1, #12288	; 0x3000
 8001f24:	8028      	strh	r0, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8001f26:	6821      	ldr	r1, [r4, #0]
 8001f28:	400a      	ands	r2, r1
 8001f2a:	f482 5000 	eor.w	r0, r2, #8192	; 0x2000
 8001f2e:	f080 0120 	eor.w	r1, r0, #32
 8001f32:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
 8001f36:	f042 0080 	orr.w	r0, r2, #128	; 0x80
 8001f3a:	6020      	str	r0, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	f003 0110 	and.w	r1, r3, #16
 8001f42:	b28a      	uxth	r2, r1
 8001f44:	b932      	cbnz	r2, 8001f54 <CTR_LP+0x74>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8001f46:	6820      	ldr	r0, [r4, #0]
 8001f48:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8001f4c:	4003      	ands	r3, r0
 8001f4e:	6023      	str	r3, [r4, #0]
        In0_Process();
 8001f50:	4b43      	ldr	r3, [pc, #268]	; (8002060 <CTR_LP+0x180>)
 8001f52:	e01b      	b.n	8001f8c <CTR_LP+0xac>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8001f54:	6820      	ldr	r0, [r4, #0]
 8001f56:	b283      	uxth	r3, r0
 8001f58:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8001f5c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8001f60:	f401 6200 	and.w	r2, r1, #2048	; 0x800
 8001f64:	b290      	uxth	r0, r2
 8001f66:	b130      	cbz	r0, 8001f76 <CTR_LP+0x96>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8001f68:	6821      	ldr	r1, [r4, #0]
 8001f6a:	f640 728f 	movw	r2, #3983	; 0xf8f
 8001f6e:	400a      	ands	r2, r1
 8001f70:	6022      	str	r2, [r4, #0]
          Setup0_Process();
 8001f72:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <CTR_LP+0x184>)
 8001f74:	e00a      	b.n	8001f8c <CTR_LP+0xac>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8001f76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001f7a:	b219      	sxth	r1, r3
 8001f7c:	2900      	cmp	r1, #0
 8001f7e:	dab3      	bge.n	8001ee8 <CTR_LP+0x8>
        {
          _ClearEP_CTR_RX(ENDP0);
 8001f80:	6822      	ldr	r2, [r4, #0]
 8001f82:	f640 708f 	movw	r0, #3983	; 0xf8f
 8001f86:	4010      	ands	r0, r2
          Out0_Process();
 8001f88:	4b37      	ldr	r3, [pc, #220]	; (8002068 <CTR_LP+0x188>)
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
 8001f8a:	6020      	str	r0, [r4, #0]
          Out0_Process();
 8001f8c:	4798      	blx	r3
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8001f8e:	6821      	ldr	r1, [r4, #0]
 8001f90:	882a      	ldrh	r2, [r5, #0]
 8001f92:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8001f96:	f402 5080 	and.w	r0, r2, #4096	; 0x1000
 8001f9a:	400b      	ands	r3, r1
 8001f9c:	b281      	uxth	r1, r0
 8001f9e:	b109      	cbz	r1, 8001fa4 <CTR_LP+0xc4>
 8001fa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001fa4:	4a2c      	ldr	r2, [pc, #176]	; (8002058 <CTR_LP+0x178>)
 8001fa6:	8810      	ldrh	r0, [r2, #0]
 8001fa8:	f400 5100 	and.w	r1, r0, #8192	; 0x2000
 8001fac:	b28a      	uxth	r2, r1
 8001fae:	b10a      	cbz	r2, 8001fb4 <CTR_LP+0xd4>
 8001fb0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fb4:	4829      	ldr	r0, [pc, #164]	; (800205c <CTR_LP+0x17c>)
 8001fb6:	8801      	ldrh	r1, [r0, #0]
 8001fb8:	f001 0210 	and.w	r2, r1, #16
 8001fbc:	b291      	uxth	r1, r2
 8001fbe:	b109      	cbz	r1, 8001fc4 <CTR_LP+0xe4>
 8001fc0:	f083 0310 	eor.w	r3, r3, #16
 8001fc4:	8800      	ldrh	r0, [r0, #0]
 8001fc6:	f000 0220 	and.w	r2, r0, #32
 8001fca:	b291      	uxth	r1, r2
 8001fcc:	b109      	cbz	r1, 8001fd2 <CTR_LP+0xf2>
 8001fce:	f083 0320 	eor.w	r3, r3, #32
 8001fd2:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 8001fd6:	4a1f      	ldr	r2, [pc, #124]	; (8002054 <CTR_LP+0x174>)
 8001fd8:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 8001fdc:	6011      	str	r1, [r2, #0]
          return;
 8001fde:	e031      	b.n	8002044 <CTR_LP+0x164>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8001fe0:	0093      	lsls	r3, r2, #2
 8001fe2:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8001fe6:	f500 43b8 	add.w	r3, r0, #23552	; 0x5c00
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	b288      	uxth	r0, r1
 8001fee:	f8ad 0006 	strh.w	r0, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8001ff2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8001ff6:	b208      	sxth	r0, r1
 8001ff8:	2800      	cmp	r0, #0
 8001ffa:	da09      	bge.n	8002010 <CTR_LP+0x130>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	f640 718f 	movw	r1, #3983	; 0xf8f
 8002002:	4001      	ands	r1, r0
 8002004:	6019      	str	r1, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <CTR_LP+0x18c>)
 8002008:	3a01      	subs	r2, #1
 800200a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800200e:	4780      	blx	r0

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8002010:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8002014:	f001 0280 	and.w	r2, r1, #128	; 0x80
 8002018:	b293      	uxth	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	f43f af64 	beq.w	8001ee8 <CTR_LP+0x8>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8002020:	480b      	ldr	r0, [pc, #44]	; (8002050 <CTR_LP+0x170>)
 8002022:	7802      	ldrb	r2, [r0, #0]
 8002024:	0091      	lsls	r1, r2, #2
 8002026:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800202a:	f503 41b8 	add.w	r1, r3, #23552	; 0x5c00
 800202e:	6808      	ldr	r0, [r1, #0]
 8002030:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8002034:	4003      	ands	r3, r0
 8002036:	600b      	str	r3, [r1, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8002038:	490d      	ldr	r1, [pc, #52]	; (8002070 <CTR_LP+0x190>)
 800203a:	3a01      	subs	r2, #1
 800203c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8002040:	4780      	blx	r0
 8002042:	e751      	b.n	8001ee8 <CTR_LP+0x8>
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8002044:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8002046:	bf00      	nop
 8002048:	40005c44 	.word	0x40005c44
 800204c:	20000af0 	.word	0x20000af0
 8002050:	200012fc 	.word	0x200012fc
 8002054:	40005c00 	.word	0x40005c00
 8002058:	20001326 	.word	0x20001326
 800205c:	20001328 	.word	0x20001328
 8002060:	08001b55 	.word	0x08001b55
 8002064:	08001809 	.word	0x08001809
 8002068:	08001725 	.word	0x08001725
 800206c:	20000038 	.word	0x20000038
 8002070:	2000001c 	.word	0x2000001c

08002074 <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8002074:	4a03      	ldr	r2, [pc, #12]	; (8002084 <FLASH_Unlock+0x10>)
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <FLASH_Unlock+0x14>)
  FLASH->KEYR = FLASH_KEY2;
 8002078:	f102 3088 	add.w	r0, r2, #2290649224	; 0x88888888
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 800207c:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 800207e:	6058      	str	r0, [r3, #4]
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	45670123 	.word	0x45670123
 8002088:	40022000 	.word	0x40022000

0800208c <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 800208c:	4b02      	ldr	r3, [pc, #8]	; (8002098 <FLASH_Lock+0xc>)
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	f042 0080 	orr.w	r0, r2, #128	; 0x80
 8002094:	6118      	str	r0, [r3, #16]
 8002096:	4770      	bx	lr
 8002098:	40022000 	.word	0x40022000

0800209c <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800209c:	4b01      	ldr	r3, [pc, #4]	; (80020a4 <FLASH_ClearFlag+0x8>)
 800209e:	60d8      	str	r0, [r3, #12]
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40022000 	.word	0x40022000

080020a8 <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <FLASH_GetStatus+0x24>)
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	07d1      	lsls	r1, r2, #31
 80020ae:	d409      	bmi.n	80020c4 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 80020b0:	68d8      	ldr	r0, [r3, #12]
 80020b2:	0742      	lsls	r2, r0, #29
 80020b4:	d408      	bmi.n	80020c8 <FLASH_GetStatus+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 80020b6:	68d9      	ldr	r1, [r3, #12]
 80020b8:	f011 0f10 	tst.w	r1, #16
      {
        flashstatus = FLASH_ERROR_WRP;
 80020bc:	bf0c      	ite	eq
 80020be:	2004      	moveq	r0, #4
 80020c0:	2003      	movne	r0, #3
 80020c2:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 80020c4:	2001      	movs	r0, #1
 80020c6:	4770      	bx	lr
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
    { 
      flashstatus = FLASH_ERROR_PG;
 80020c8:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 80020ca:	4770      	bx	lr
 80020cc:	40022000 	.word	0x40022000

080020d0 <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80020d0:	b513      	push	{r0, r1, r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 80020d2:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <FLASH_WaitForLastOperation+0x34>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80020d4:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 80020d6:	4798      	blx	r3

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80020d8:	2801      	cmp	r0, #1
 80020da:	d10f      	bne.n	80020fc <FLASH_WaitForLastOperation+0x2c>
 80020dc:	b164      	cbz	r4, 80020f8 <FLASH_WaitForLastOperation+0x28>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 80020de:	2000      	movs	r0, #0
 80020e0:	9001      	str	r0, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 80020e2:	20ff      	movs	r0, #255	; 0xff
 80020e4:	9001      	str	r0, [sp, #4]
 80020e6:	9901      	ldr	r1, [sp, #4]
 80020e8:	b111      	cbz	r1, 80020f0 <FLASH_WaitForLastOperation+0x20>
 80020ea:	9b01      	ldr	r3, [sp, #4]
 80020ec:	1e58      	subs	r0, r3, #1
 80020ee:	e7f9      	b.n	80020e4 <FLASH_WaitForLastOperation+0x14>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <FLASH_WaitForLastOperation+0x34>)
 80020f2:	4790      	blx	r2
    Timeout--;
 80020f4:	3c01      	subs	r4, #1
 80020f6:	e7ef      	b.n	80020d8 <FLASH_WaitForLastOperation+0x8>
  }

  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 80020f8:	2005      	movs	r0, #5
 80020fa:	e002      	b.n	8002102 <FLASH_WaitForLastOperation+0x32>
 80020fc:	2c00      	cmp	r4, #0
 80020fe:	bf08      	it	eq
 8002100:	2005      	moveq	r0, #5
  }

  /* Return the operation status */
  return status;
}
 8002102:	bd1c      	pop	{r2, r3, r4, pc}
 8002104:	080020a9 	.word	0x080020a9

08002108 <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800210c:	4d0f      	ldr	r5, [pc, #60]	; (800214c <FLASH_ProgramWord+0x44>)
 800210e:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8002110:	460f      	mov	r7, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002112:	47a8      	blx	r5
  
  if(status == FLASH_COMPLETE)
 8002114:	2804      	cmp	r0, #4
 8002116:	d117      	bne.n	8002148 <FLASH_ProgramWord+0x40>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8002118:	4c0d      	ldr	r4, [pc, #52]	; (8002150 <FLASH_ProgramWord+0x48>)
  
    *(vu16*)Address = (u16)Data;
 800211a:	b2b9      	uxth	r1, r7
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 800211c:	6923      	ldr	r3, [r4, #16]
 800211e:	f043 0001 	orr.w	r0, r3, #1
 8002122:	6120      	str	r0, [r4, #16]
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002124:	200f      	movs	r0, #15
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
  
    *(vu16*)Address = (u16)Data;
 8002126:	8031      	strh	r1, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002128:	47a8      	blx	r5
 
    if(status == FLASH_COMPLETE)
 800212a:	2804      	cmp	r0, #4
 800212c:	d103      	bne.n	8002136 <FLASH_ProgramWord+0x2e>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 800212e:	0c3f      	lsrs	r7, r7, #16
 8002130:	8077      	strh	r7, [r6, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002132:	200f      	movs	r0, #15
 8002134:	47a8      	blx	r5
        
      if(status != FLASH_BUSY)
 8002136:	2801      	cmp	r0, #1
 8002138:	d101      	bne.n	800213e <FLASH_ProgramWord+0x36>
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 800213a:	2001      	movs	r0, #1
 800213c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else
    {
      if (status != FLASH_BUSY)
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 800213e:	6922      	ldr	r2, [r4, #16]
 8002140:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8002144:	4013      	ands	r3, r2
 8002146:	6123      	str	r3, [r4, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 8002148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800214a:	bf00      	nop
 800214c:	080020d1 	.word	0x080020d1
 8002150:	40022000 	.word	0x40022000

08002154 <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8002158:	4d0d      	ldr	r5, [pc, #52]	; (8002190 <FLASH_ErasePage+0x3c>)
 800215a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800215e:	47a8      	blx	r5
  
  if(status == FLASH_COMPLETE)
 8002160:	2804      	cmp	r0, #4
 8002162:	d113      	bne.n	800218c <FLASH_ErasePage+0x38>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8002164:	4c0b      	ldr	r4, [pc, #44]	; (8002194 <FLASH_ErasePage+0x40>)
 8002166:	6923      	ldr	r3, [r4, #16]
 8002168:	f043 0002 	orr.w	r0, r3, #2
 800216c:	6120      	str	r0, [r4, #16]
    FLASH->AR = Page_Address; 
 800216e:	6166      	str	r6, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8002170:	6921      	ldr	r1, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8002172:	f640 70ff 	movw	r0, #4095	; 0xfff
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
 8002176:	f041 0240 	orr.w	r2, r1, #64	; 0x40
 800217a:	6122      	str	r2, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800217c:	47a8      	blx	r5

    if(status != FLASH_BUSY)
 800217e:	2801      	cmp	r0, #1
 8002180:	d004      	beq.n	800218c <FLASH_ErasePage+0x38>
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 8002182:	6921      	ldr	r1, [r4, #16]
 8002184:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 8002188:	400b      	ands	r3, r1
 800218a:	6123      	str	r3, [r4, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 800218c:	bd70      	pop	{r4, r5, r6, pc}
 800218e:	bf00      	nop
 8002190:	080020d1 	.word	0x080020d1
 8002194:	40022000 	.word	0x40022000

08002198 <Virtual_Com_Port_StringVendor>:
 8002198:	004f0326 004f0052 00410043 00200020     &.O.R.O.C.A. . .
 80021a8:	00200020 00200020 00200020 00200020      . . . . . . . .
 80021b8:	00200020 01120020                                 . . .

080021be <Virtual_Com_Port_DeviceDescriptor>:
 80021be:	02000112 40000002 57400483 02010200     .......@..@W....
 80021ce:	03040103                                         ..

080021d0 <Virtual_Com_Port_StringLangID>:
 80021d0:	04090304                                ....

080021d4 <Virtual_Com_Port_StringProduct>:
 80021d4:	00530332 0079006b 006f0052 00650076     2.S.k.y.R.o.v.e.
 80021e4:	00200072 004f0043 0020004d 00200020     r. .C.O.M. . . .
 80021f4:	00200020 00200020 00200020 00200020      . . . . . . . .
 8002204:	02090020                                          .

08002206 <Virtual_Com_Port_ConfigDescriptor>:
 8002206:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8002216:	24050001 05011000 01000124 02022404     ...$....$....$..
 8002226:	00062405 82050701 ff000803 00010409     .$..............
 8002236:	00000a02 03050700 00004002 02810507     .........@......
 8002246:	00000040 00000000                                @.....
